                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8804 (Aug  6 2013) (Linux)
                                      4 ; This file was generated Sat Nov  3 15:44:38 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module cc2530_rf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _cc2530_rf_driver
                                     13 	.globl _packetbuf_set_attr
                                     14 	.globl _clock_delay_usec
                                     15 	.globl _ACTIVE
                                     16 	.globl _TX_BYTE
                                     17 	.globl _RX_BYTE
                                     18 	.globl _ERR
                                     19 	.globl _FE
                                     20 	.globl _SLAVE
                                     21 	.globl _RE
                                     22 	.globl _MODE
                                     23 	.globl _T3OVFIF
                                     24 	.globl _T3CH0IF
                                     25 	.globl _T3CH1IF
                                     26 	.globl _T4OVFIF
                                     27 	.globl _T4CH0IF
                                     28 	.globl _T4CH1IF
                                     29 	.globl _OVFIM
                                     30 	.globl _B_0
                                     31 	.globl _B_1
                                     32 	.globl _B_2
                                     33 	.globl _B_3
                                     34 	.globl _B_4
                                     35 	.globl _B_5
                                     36 	.globl _B_6
                                     37 	.globl _B_7
                                     38 	.globl _P2IF
                                     39 	.globl _UTX0IF
                                     40 	.globl _UTX1IF
                                     41 	.globl _P1IF
                                     42 	.globl _WDTIF
                                     43 	.globl _ACC_0
                                     44 	.globl _ACC_1
                                     45 	.globl _ACC_2
                                     46 	.globl _ACC_3
                                     47 	.globl _ACC_4
                                     48 	.globl _ACC_5
                                     49 	.globl _ACC_6
                                     50 	.globl _ACC_7
                                     51 	.globl _P
                                     52 	.globl _F1
                                     53 	.globl _OV
                                     54 	.globl _RS0
                                     55 	.globl _RS1
                                     56 	.globl _F0
                                     57 	.globl _AC
                                     58 	.globl _CY
                                     59 	.globl _DMAIF
                                     60 	.globl _T1IF
                                     61 	.globl _T2IF
                                     62 	.globl _T3IF
                                     63 	.globl _T4IF
                                     64 	.globl _P0IF
                                     65 	.globl _STIF
                                     66 	.globl _DMAIE
                                     67 	.globl _T1IE
                                     68 	.globl _T2IE
                                     69 	.globl _T3IE
                                     70 	.globl _T4IE
                                     71 	.globl _P0IE
                                     72 	.globl _RFERRIE
                                     73 	.globl _ADCIE
                                     74 	.globl _URX0IE
                                     75 	.globl _URX1IE
                                     76 	.globl _ENCIE
                                     77 	.globl _STIE
                                     78 	.globl _EA
                                     79 	.globl _P2_0
                                     80 	.globl _P2_1
                                     81 	.globl _P2_2
                                     82 	.globl _P2_3
                                     83 	.globl _P2_4
                                     84 	.globl _P2_5
                                     85 	.globl _P2_6
                                     86 	.globl _P2_7
                                     87 	.globl _ENCIF_0
                                     88 	.globl _ENCIF_1
                                     89 	.globl _P1_0
                                     90 	.globl _P1_1
                                     91 	.globl _P1_2
                                     92 	.globl _P1_3
                                     93 	.globl _P1_4
                                     94 	.globl _P1_5
                                     95 	.globl _P1_6
                                     96 	.globl _P1_7
                                     97 	.globl _IT0
                                     98 	.globl _RFERRIF
                                     99 	.globl _IT1
                                    100 	.globl _URX0IF
                                    101 	.globl _ADCIF
                                    102 	.globl _URX1IF
                                    103 	.globl _P0_0
                                    104 	.globl _P0_1
                                    105 	.globl _P0_2
                                    106 	.globl _P0_3
                                    107 	.globl _P0_4
                                    108 	.globl _P0_5
                                    109 	.globl _P0_6
                                    110 	.globl _P0_7
                                    111 	.globl _WDCTL
                                    112 	.globl _U1GCR
                                    113 	.globl _U1UCR
                                    114 	.globl _U1BAUD
                                    115 	.globl _U1DBUF
                                    116 	.globl _U1CSR
                                    117 	.globl _U0GCR
                                    118 	.globl _U0UCR
                                    119 	.globl _U0BAUD
                                    120 	.globl _U0DBUF
                                    121 	.globl _U0CSR
                                    122 	.globl _TIMIF
                                    123 	.globl _T4CC1
                                    124 	.globl _T4CCTL1
                                    125 	.globl _T4CC0
                                    126 	.globl _T4CCTL0
                                    127 	.globl _T4CTL
                                    128 	.globl _T4CNT
                                    129 	.globl _T3CC1
                                    130 	.globl _T3CCTL1
                                    131 	.globl _T3CC0
                                    132 	.globl _T3CCTL0
                                    133 	.globl _T3CTL
                                    134 	.globl _T3CNT
                                    135 	.globl _T2MSEL
                                    136 	.globl _T2IRQM
                                    137 	.globl _T2MOVF2
                                    138 	.globl _T2MOVF1
                                    139 	.globl _T2MOVF0
                                    140 	.globl _T2M1
                                    141 	.globl _T2M0
                                    142 	.globl _T2IRQF
                                    143 	.globl _T2EVTCFG
                                    144 	.globl _T2CTRL
                                    145 	.globl _T1STAT
                                    146 	.globl _T1CCTL2
                                    147 	.globl _T1CCTL1
                                    148 	.globl _T1CCTL0
                                    149 	.globl _T1CTL
                                    150 	.globl _T1CNTH
                                    151 	.globl _T1CNTL
                                    152 	.globl _T1CC2H
                                    153 	.globl _T1CC2L
                                    154 	.globl _T1CC1H
                                    155 	.globl _T1CC1L
                                    156 	.globl _T1CC0H
                                    157 	.globl _T1CC0L
                                    158 	.globl _CLKCONSTA
                                    159 	.globl _CLKCONCMD
                                    160 	.globl _SLEEPSTA
                                    161 	.globl _SLEEPCMD
                                    162 	.globl _STLOAD
                                    163 	.globl _ST2
                                    164 	.globl _ST1
                                    165 	.globl _ST0
                                    166 	.globl _RFERRF
                                    167 	.globl _RFIRQF0
                                    168 	.globl _RFST
                                    169 	.globl _RFD
                                    170 	.globl _RFIRQF1
                                    171 	.globl _PSBANK
                                    172 	.globl _FMAP
                                    173 	.globl _MEMCTR
                                    174 	.globl __XPAGE
                                    175 	.globl _MPAGE
                                    176 	.globl _PMUX
                                    177 	.globl _P2DIR
                                    178 	.globl _P1DIR
                                    179 	.globl _P0DIR
                                    180 	.globl _P2INP
                                    181 	.globl _P1INP
                                    182 	.globl _P2SEL
                                    183 	.globl _P1SEL
                                    184 	.globl _P0SEL
                                    185 	.globl _APCFG
                                    186 	.globl _PERCFG
                                    187 	.globl _P0INP
                                    188 	.globl _P2IEN
                                    189 	.globl _P1IEN
                                    190 	.globl _P0IEN
                                    191 	.globl _PICTL
                                    192 	.globl _P2IFG
                                    193 	.globl _P1IFG
                                    194 	.globl _P0IFG
                                    195 	.globl _DMAREQ
                                    196 	.globl _DMAARM
                                    197 	.globl _DMA0CFGH
                                    198 	.globl _DMA0CFGL
                                    199 	.globl _DMA1CFGH
                                    200 	.globl _DMA1CFGL
                                    201 	.globl _DMAIRQ
                                    202 	.globl _ENCCS
                                    203 	.globl _ENCDO
                                    204 	.globl _ENCDI
                                    205 	.globl _RNDH
                                    206 	.globl _RNDL
                                    207 	.globl _ADCH
                                    208 	.globl _ADCL
                                    209 	.globl _ADCCON3
                                    210 	.globl _ADCCON2
                                    211 	.globl _ADCCON1
                                    212 	.globl _B
                                    213 	.globl _IRCON2
                                    214 	.globl _ACC
                                    215 	.globl _PSW
                                    216 	.globl _IRCON
                                    217 	.globl _IP1
                                    218 	.globl _IEN1
                                    219 	.globl _IP0
                                    220 	.globl _IEN0
                                    221 	.globl _P2
                                    222 	.globl _S1CON
                                    223 	.globl _IEN2
                                    224 	.globl _S0CON
                                    225 	.globl _DPS
                                    226 	.globl _P1
                                    227 	.globl _TCON
                                    228 	.globl _PCON
                                    229 	.globl _DPH1
                                    230 	.globl _DPL1
                                    231 	.globl _DPH0
                                    232 	.globl _DPL0
                                    233 	.globl _SP
                                    234 	.globl _P0
                                    235 	.globl _X_IEEE_ADDR
                                    236 	.globl _X_INFOPAGE
                                    237 	.globl _X_P2DIR
                                    238 	.globl _X_P1DIR
                                    239 	.globl _X_P0DIR
                                    240 	.globl _X_U1GCR
                                    241 	.globl _X_U1UCR
                                    242 	.globl _X_U1BAUD
                                    243 	.globl _X_U1DBUF
                                    244 	.globl _X_U1CSR
                                    245 	.globl _X_P2INP
                                    246 	.globl _X_P1INP
                                    247 	.globl _X_P2SEL
                                    248 	.globl _X_P1SEL
                                    249 	.globl _X_P0SEL
                                    250 	.globl _X_APCFG
                                    251 	.globl _X_PERCFG
                                    252 	.globl _X_T4CC1
                                    253 	.globl _X_T4CCTL1
                                    254 	.globl _X_T4CC0
                                    255 	.globl _X_T4CCTL0
                                    256 	.globl _X_T4CTL
                                    257 	.globl _X_T4CNT
                                    258 	.globl _X_RFIRQF0
                                    259 	.globl _X_T1CCTL2
                                    260 	.globl _X_T1CCTL1
                                    261 	.globl _X_T1CCTL0
                                    262 	.globl _X_T1CTL
                                    263 	.globl _X_T1CNTH
                                    264 	.globl _X_T1CNTL
                                    265 	.globl _X_RFST
                                    266 	.globl _X_T1CC2H
                                    267 	.globl _X_T1CC2L
                                    268 	.globl _X_T1CC1H
                                    269 	.globl _X_T1CC1L
                                    270 	.globl _X_T1CC0H
                                    271 	.globl _X_T1CC0L
                                    272 	.globl _X_RFD
                                    273 	.globl _X_TIMIF
                                    274 	.globl _X_DMAREQ
                                    275 	.globl _X_DMAARM
                                    276 	.globl _X_DMA0CFGH
                                    277 	.globl _X_DMA0CFGL
                                    278 	.globl _X_DMA1CFGH
                                    279 	.globl _X_DMA1CFGL
                                    280 	.globl _X_DMAIRQ
                                    281 	.globl _X_T3CC1
                                    282 	.globl _X_T3CCTL1
                                    283 	.globl _X_T3CC0
                                    284 	.globl _X_T3CCTL0
                                    285 	.globl _X_T3CTL
                                    286 	.globl _X_T3CNT
                                    287 	.globl _X_WDCTL
                                    288 	.globl _X_MEMCTR
                                    289 	.globl _X_CLKCONCMD
                                    290 	.globl _X_U0GCR
                                    291 	.globl _X_U0UCR
                                    292 	.globl _X_T2MSEL
                                    293 	.globl _X_U0BAUD
                                    294 	.globl _X_U0DBUF
                                    295 	.globl _X_RFERRF
                                    296 	.globl _X_SLEEPCMD
                                    297 	.globl _X_RNDH
                                    298 	.globl _X_RNDL
                                    299 	.globl _X_ADCH
                                    300 	.globl _X_ADCL
                                    301 	.globl _X_ADCCON3
                                    302 	.globl _X_ADCCON2
                                    303 	.globl _X_ADCCON1
                                    304 	.globl _X_ENCCS
                                    305 	.globl _X_ENCDO
                                    306 	.globl _X_ENCDI
                                    307 	.globl _X_T1STAT
                                    308 	.globl _X_PMUX
                                    309 	.globl _X_STLOAD
                                    310 	.globl _X_P2IEN
                                    311 	.globl _X_P0IEN
                                    312 	.globl _X_T2IRQM
                                    313 	.globl _X_T2MOVF2
                                    314 	.globl _X_T2MOVF1
                                    315 	.globl _X_T2MOVF0
                                    316 	.globl _X_T2M1
                                    317 	.globl _X_T2M0
                                    318 	.globl _X_T2IRQF
                                    319 	.globl _X_P2
                                    320 	.globl _X_PSBANK
                                    321 	.globl _X_FMAP
                                    322 	.globl _X_CLKCONSTA
                                    323 	.globl _X_SLEEPSTA
                                    324 	.globl _X_T2EVTCFG
                                    325 	.globl _X_ST2
                                    326 	.globl _X_ST1
                                    327 	.globl _X_ST0
                                    328 	.globl _X_T2CTRL
                                    329 	.globl _X__XPAGE
                                    330 	.globl _X_MPAGE
                                    331 	.globl _X_RFIRQF1
                                    332 	.globl _X_P1
                                    333 	.globl _X_P0INP
                                    334 	.globl _X_P1IEN
                                    335 	.globl _X_PICTL
                                    336 	.globl _X_P2IFG
                                    337 	.globl _X_P1IFG
                                    338 	.globl _X_P0IFG
                                    339 	.globl _X_U0CSR
                                    340 	.globl _X_P0
                                    341 	.globl _USBF5
                                    342 	.globl _USBF4
                                    343 	.globl _USBF3
                                    344 	.globl _USBF2
                                    345 	.globl _USBF1
                                    346 	.globl _USBF0
                                    347 	.globl _USBCNTH
                                    348 	.globl _USBCNTL
                                    349 	.globl _USBCNT0
                                    350 	.globl _USBCSOH
                                    351 	.globl _USBCSOL
                                    352 	.globl _USBMAXO
                                    353 	.globl _USBCSIH
                                    354 	.globl _USBCSIL
                                    355 	.globl _USBCS0
                                    356 	.globl _USBMAXI
                                    357 	.globl _USBCTRL
                                    358 	.globl _USBINDEX
                                    359 	.globl _USBFRMH
                                    360 	.globl _USBFRML
                                    361 	.globl _USBCIE
                                    362 	.globl _USBOIE
                                    363 	.globl _USBIIE
                                    364 	.globl _USBCIF
                                    365 	.globl _USBOIF
                                    366 	.globl _USBIIF
                                    367 	.globl _USBPOW
                                    368 	.globl _USBADDR
                                    369 	.globl _CSPT
                                    370 	.globl _CSPZ
                                    371 	.globl _CSPY
                                    372 	.globl _CSPX
                                    373 	.globl _CSPSTAT
                                    374 	.globl _CSPCTRL
                                    375 	.globl _CSPPROG23
                                    376 	.globl _CSPPROG22
                                    377 	.globl _CSPPROG21
                                    378 	.globl _CSPPROG20
                                    379 	.globl _CSPPROG19
                                    380 	.globl _CSPPROG18
                                    381 	.globl _CSPPROG17
                                    382 	.globl _CSPPROG16
                                    383 	.globl _CSPPROG15
                                    384 	.globl _CSPPROG14
                                    385 	.globl _CSPPROG13
                                    386 	.globl _CSPPROG12
                                    387 	.globl _CSPPROG11
                                    388 	.globl _CSPPROG10
                                    389 	.globl _CSPPROG9
                                    390 	.globl _CSPPROG8
                                    391 	.globl _CSPPROG7
                                    392 	.globl _CSPPROG6
                                    393 	.globl _CSPPROG5
                                    394 	.globl _CSPPROG4
                                    395 	.globl _CSPPROG3
                                    396 	.globl _CSPPROG2
                                    397 	.globl _CSPPROG1
                                    398 	.globl _CSPPROG0
                                    399 	.globl _RFC_OBS_CTRL2
                                    400 	.globl _RFC_OBS_CTRL1
                                    401 	.globl _RFC_OBS_CTRL0
                                    402 	.globl _TXFILTCFG
                                    403 	.globl _PTEST1
                                    404 	.globl _PTEST0
                                    405 	.globl _ATEST
                                    406 	.globl _DACTEST2
                                    407 	.globl _DACTEST1
                                    408 	.globl _DACTEST0
                                    409 	.globl _MDMTEST1
                                    410 	.globl _MDMTEST0
                                    411 	.globl _ADCTEST2
                                    412 	.globl _ADCTEST1
                                    413 	.globl _ADCTEST0
                                    414 	.globl _AGCCTRL3
                                    415 	.globl _AGCCTRL2
                                    416 	.globl _AGCCTRL1
                                    417 	.globl _AGCCTRL0
                                    418 	.globl _FSCAL3
                                    419 	.globl _FSCAL2
                                    420 	.globl _FSCAL1
                                    421 	.globl _FSCAL0
                                    422 	.globl _FSCTRL
                                    423 	.globl _RXCTRL
                                    424 	.globl _FREQEST
                                    425 	.globl _MDMCTRL1
                                    426 	.globl _MDMCTRL0
                                    427 	.globl _RFRND
                                    428 	.globl _RFERRM
                                    429 	.globl _RFIRQM1
                                    430 	.globl _RFIRQM0
                                    431 	.globl _TXLAST_PTR
                                    432 	.globl _TXFIRST_PTR
                                    433 	.globl _RXP1_PTR
                                    434 	.globl _RXLAST_PTR
                                    435 	.globl _RXFIRST_PTR
                                    436 	.globl _TXFIFOCNT
                                    437 	.globl _RXFIFOCNT
                                    438 	.globl _RXFIRST
                                    439 	.globl _RSSISTAT
                                    440 	.globl _RSSI
                                    441 	.globl _CCACTRL1
                                    442 	.globl _CCACTRL0
                                    443 	.globl _FSMCTRL
                                    444 	.globl _FIFOPCTRL
                                    445 	.globl _FSMSTAT1
                                    446 	.globl _FSMSTAT0
                                    447 	.globl _TXCTRL
                                    448 	.globl _TXPOWER
                                    449 	.globl _FREQCTRL
                                    450 	.globl _FREQTUNE
                                    451 	.globl _RXMASKCLR
                                    452 	.globl _RXMASKSET
                                    453 	.globl _RXENABLE
                                    454 	.globl _FRMCTRL1
                                    455 	.globl _FRMCTRL0
                                    456 	.globl _SRCEXTEN2
                                    457 	.globl _SRCEXTEN1
                                    458 	.globl _SRCEXTEN0
                                    459 	.globl _SRCSHORTEN2
                                    460 	.globl _SRCSHORTEN1
                                    461 	.globl _SRCSHORTEN0
                                    462 	.globl _SRCMATCH
                                    463 	.globl _FRMFILT1
                                    464 	.globl _FRMFILT0
                                    465 	.globl _SHORT_ADDR1
                                    466 	.globl _SHORT_ADDR0
                                    467 	.globl _PAN_ID1
                                    468 	.globl _PAN_ID0
                                    469 	.globl _EXT_ADDR7
                                    470 	.globl _EXT_ADDR6
                                    471 	.globl _EXT_ADDR5
                                    472 	.globl _EXT_ADDR4
                                    473 	.globl _EXT_ADDR3
                                    474 	.globl _EXT_ADDR2
                                    475 	.globl _EXT_ADDR1
                                    476 	.globl _EXT_ADDR0
                                    477 	.globl _SRCSHORTPENDEN2
                                    478 	.globl _SRCSHORTPENDEN1
                                    479 	.globl _SRCSHORTPENDEN0
                                    480 	.globl _SRCEXTPENDEN2
                                    481 	.globl _SRCEXTPENDEN1
                                    482 	.globl _SRCEXTPENDEN0
                                    483 	.globl _SRCRESINDEX
                                    484 	.globl _SRCRESMASK2
                                    485 	.globl _SRCRESMASK1
                                    486 	.globl _SRCRESMASK0
                                    487 	.globl _SRC_ADDR_TABLE
                                    488 	.globl _TXFIFO
                                    489 	.globl _RXFIFO
                                    490 	.globl _RFCORE_RAM
                                    491 	.globl _CMPCTL
                                    492 	.globl _OPAMPS
                                    493 	.globl _OPAMPC
                                    494 	.globl _STCV2
                                    495 	.globl _STCV1
                                    496 	.globl _STCV0
                                    497 	.globl _STCS
                                    498 	.globl _STCC
                                    499 	.globl _T1CC4H
                                    500 	.globl _T1CC4L
                                    501 	.globl _T1CC3H
                                    502 	.globl _T1CC3L
                                    503 	.globl _XX_T1CC2H
                                    504 	.globl _XX_T1CC2L
                                    505 	.globl _XX_T1CC1H
                                    506 	.globl _XX_T1CC1L
                                    507 	.globl _XX_T1CC0H
                                    508 	.globl _XX_T1CC0L
                                    509 	.globl _T1CCTL4
                                    510 	.globl _T1CCTL3
                                    511 	.globl _XX_T1CCTL2
                                    512 	.globl _XX_T1CCTL1
                                    513 	.globl _XX_T1CCTL0
                                    514 	.globl _CLD
                                    515 	.globl _IRCTL
                                    516 	.globl _CHIPINFO1
                                    517 	.globl _CHIPINFO0
                                    518 	.globl _FWDATA
                                    519 	.globl _FADDRH
                                    520 	.globl _FADDRL
                                    521 	.globl _FCTL
                                    522 	.globl _IVCTRL
                                    523 	.globl _BATTMON
                                    524 	.globl _SRCRC
                                    525 	.globl _DBGDATA
                                    526 	.globl _TESTREG0
                                    527 	.globl _CHIPID
                                    528 	.globl _CHVER
                                    529 	.globl _OBSSEL5
                                    530 	.globl _OBSSEL4
                                    531 	.globl _OBSSEL3
                                    532 	.globl _OBSSEL2
                                    533 	.globl _OBSSEL1
                                    534 	.globl _OBSSEL0
                                    535 	.globl _I2CIO
                                    536 	.globl _I2CWC
                                    537 	.globl _I2CADDR
                                    538 	.globl _I2CDATA
                                    539 	.globl _I2CSTAT
                                    540 	.globl _I2CCFG
                                    541 	.globl _OPAMPMC
                                    542 	.globl _MONMUX
                                    543 ;--------------------------------------------------------
                                    544 ; special function registers
                                    545 ;--------------------------------------------------------
                                    546 	.area RSEG    (ABS,DATA)
      000000                        547 	.org 0x0000
                           000080   548 _P0	=	0x0080
                           000081   549 _SP	=	0x0081
                           000082   550 _DPL0	=	0x0082
                           000083   551 _DPH0	=	0x0083
                           000084   552 _DPL1	=	0x0084
                           000085   553 _DPH1	=	0x0085
                           000087   554 _PCON	=	0x0087
                           000088   555 _TCON	=	0x0088
                           000090   556 _P1	=	0x0090
                           000092   557 _DPS	=	0x0092
                           000098   558 _S0CON	=	0x0098
                           00009A   559 _IEN2	=	0x009a
                           00009B   560 _S1CON	=	0x009b
                           0000A0   561 _P2	=	0x00a0
                           0000A8   562 _IEN0	=	0x00a8
                           0000A9   563 _IP0	=	0x00a9
                           0000B8   564 _IEN1	=	0x00b8
                           0000B9   565 _IP1	=	0x00b9
                           0000C0   566 _IRCON	=	0x00c0
                           0000D0   567 _PSW	=	0x00d0
                           0000E0   568 _ACC	=	0x00e0
                           0000E8   569 _IRCON2	=	0x00e8
                           0000F0   570 _B	=	0x00f0
                           0000B4   571 _ADCCON1	=	0x00b4
                           0000B5   572 _ADCCON2	=	0x00b5
                           0000B6   573 _ADCCON3	=	0x00b6
                           0000BA   574 _ADCL	=	0x00ba
                           0000BB   575 _ADCH	=	0x00bb
                           0000BC   576 _RNDL	=	0x00bc
                           0000BD   577 _RNDH	=	0x00bd
                           0000B1   578 _ENCDI	=	0x00b1
                           0000B2   579 _ENCDO	=	0x00b2
                           0000B3   580 _ENCCS	=	0x00b3
                           0000D1   581 _DMAIRQ	=	0x00d1
                           0000D2   582 _DMA1CFGL	=	0x00d2
                           0000D3   583 _DMA1CFGH	=	0x00d3
                           0000D4   584 _DMA0CFGL	=	0x00d4
                           0000D5   585 _DMA0CFGH	=	0x00d5
                           0000D6   586 _DMAARM	=	0x00d6
                           0000D7   587 _DMAREQ	=	0x00d7
                           000089   588 _P0IFG	=	0x0089
                           00008A   589 _P1IFG	=	0x008a
                           00008B   590 _P2IFG	=	0x008b
                           00008C   591 _PICTL	=	0x008c
                           0000AB   592 _P0IEN	=	0x00ab
                           00008D   593 _P1IEN	=	0x008d
                           0000AC   594 _P2IEN	=	0x00ac
                           00008F   595 _P0INP	=	0x008f
                           0000F1   596 _PERCFG	=	0x00f1
                           0000F2   597 _APCFG	=	0x00f2
                           0000F3   598 _P0SEL	=	0x00f3
                           0000F4   599 _P1SEL	=	0x00f4
                           0000F5   600 _P2SEL	=	0x00f5
                           0000F6   601 _P1INP	=	0x00f6
                           0000F7   602 _P2INP	=	0x00f7
                           0000FD   603 _P0DIR	=	0x00fd
                           0000FE   604 _P1DIR	=	0x00fe
                           0000FF   605 _P2DIR	=	0x00ff
                           0000AE   606 _PMUX	=	0x00ae
                           000093   607 _MPAGE	=	0x0093
                           000093   608 __XPAGE	=	0x0093
                           0000C7   609 _MEMCTR	=	0x00c7
                           00009F   610 _FMAP	=	0x009f
                           00009F   611 _PSBANK	=	0x009f
                           000091   612 _RFIRQF1	=	0x0091
                           0000D9   613 _RFD	=	0x00d9
                           0000E1   614 _RFST	=	0x00e1
                           0000E9   615 _RFIRQF0	=	0x00e9
                           0000BF   616 _RFERRF	=	0x00bf
                           000095   617 _ST0	=	0x0095
                           000096   618 _ST1	=	0x0096
                           000097   619 _ST2	=	0x0097
                           0000AD   620 _STLOAD	=	0x00ad
                           0000BE   621 _SLEEPCMD	=	0x00be
                           00009D   622 _SLEEPSTA	=	0x009d
                           0000C6   623 _CLKCONCMD	=	0x00c6
                           00009E   624 _CLKCONSTA	=	0x009e
                           0000DA   625 _T1CC0L	=	0x00da
                           0000DB   626 _T1CC0H	=	0x00db
                           0000DC   627 _T1CC1L	=	0x00dc
                           0000DD   628 _T1CC1H	=	0x00dd
                           0000DE   629 _T1CC2L	=	0x00de
                           0000DF   630 _T1CC2H	=	0x00df
                           0000E2   631 _T1CNTL	=	0x00e2
                           0000E3   632 _T1CNTH	=	0x00e3
                           0000E4   633 _T1CTL	=	0x00e4
                           0000E5   634 _T1CCTL0	=	0x00e5
                           0000E6   635 _T1CCTL1	=	0x00e6
                           0000E7   636 _T1CCTL2	=	0x00e7
                           0000AF   637 _T1STAT	=	0x00af
                           000094   638 _T2CTRL	=	0x0094
                           00009C   639 _T2EVTCFG	=	0x009c
                           0000A1   640 _T2IRQF	=	0x00a1
                           0000A2   641 _T2M0	=	0x00a2
                           0000A3   642 _T2M1	=	0x00a3
                           0000A4   643 _T2MOVF0	=	0x00a4
                           0000A5   644 _T2MOVF1	=	0x00a5
                           0000A6   645 _T2MOVF2	=	0x00a6
                           0000A7   646 _T2IRQM	=	0x00a7
                           0000C3   647 _T2MSEL	=	0x00c3
                           0000CA   648 _T3CNT	=	0x00ca
                           0000CB   649 _T3CTL	=	0x00cb
                           0000CC   650 _T3CCTL0	=	0x00cc
                           0000CD   651 _T3CC0	=	0x00cd
                           0000CE   652 _T3CCTL1	=	0x00ce
                           0000CF   653 _T3CC1	=	0x00cf
                           0000EA   654 _T4CNT	=	0x00ea
                           0000EB   655 _T4CTL	=	0x00eb
                           0000EC   656 _T4CCTL0	=	0x00ec
                           0000ED   657 _T4CC0	=	0x00ed
                           0000EE   658 _T4CCTL1	=	0x00ee
                           0000EF   659 _T4CC1	=	0x00ef
                           0000D8   660 _TIMIF	=	0x00d8
                           000086   661 _U0CSR	=	0x0086
                           0000C1   662 _U0DBUF	=	0x00c1
                           0000C2   663 _U0BAUD	=	0x00c2
                           0000C4   664 _U0UCR	=	0x00c4
                           0000C5   665 _U0GCR	=	0x00c5
                           0000F8   666 _U1CSR	=	0x00f8
                           0000F9   667 _U1DBUF	=	0x00f9
                           0000FA   668 _U1BAUD	=	0x00fa
                           0000FB   669 _U1UCR	=	0x00fb
                           0000FC   670 _U1GCR	=	0x00fc
                           0000C9   671 _WDCTL	=	0x00c9
                                    672 ;--------------------------------------------------------
                                    673 ; special function bits
                                    674 ;--------------------------------------------------------
                                    675 	.area RSEG    (ABS,DATA)
      000000                        676 	.org 0x0000
                           000087   677 _P0_7	=	0x0087
                           000086   678 _P0_6	=	0x0086
                           000085   679 _P0_5	=	0x0085
                           000084   680 _P0_4	=	0x0084
                           000083   681 _P0_3	=	0x0083
                           000082   682 _P0_2	=	0x0082
                           000081   683 _P0_1	=	0x0081
                           000080   684 _P0_0	=	0x0080
                           00008F   685 _URX1IF	=	0x008f
                           00008D   686 _ADCIF	=	0x008d
                           00008B   687 _URX0IF	=	0x008b
                           00008A   688 _IT1	=	0x008a
                           000089   689 _RFERRIF	=	0x0089
                           000088   690 _IT0	=	0x0088
                           000097   691 _P1_7	=	0x0097
                           000096   692 _P1_6	=	0x0096
                           000095   693 _P1_5	=	0x0095
                           000094   694 _P1_4	=	0x0094
                           000093   695 _P1_3	=	0x0093
                           000092   696 _P1_2	=	0x0092
                           000091   697 _P1_1	=	0x0091
                           000090   698 _P1_0	=	0x0090
                           000099   699 _ENCIF_1	=	0x0099
                           000098   700 _ENCIF_0	=	0x0098
                           0000A7   701 _P2_7	=	0x00a7
                           0000A6   702 _P2_6	=	0x00a6
                           0000A5   703 _P2_5	=	0x00a5
                           0000A4   704 _P2_4	=	0x00a4
                           0000A3   705 _P2_3	=	0x00a3
                           0000A2   706 _P2_2	=	0x00a2
                           0000A1   707 _P2_1	=	0x00a1
                           0000A0   708 _P2_0	=	0x00a0
                           0000AF   709 _EA	=	0x00af
                           0000AD   710 _STIE	=	0x00ad
                           0000AC   711 _ENCIE	=	0x00ac
                           0000AB   712 _URX1IE	=	0x00ab
                           0000AA   713 _URX0IE	=	0x00aa
                           0000A9   714 _ADCIE	=	0x00a9
                           0000A8   715 _RFERRIE	=	0x00a8
                           0000BD   716 _P0IE	=	0x00bd
                           0000BC   717 _T4IE	=	0x00bc
                           0000BB   718 _T3IE	=	0x00bb
                           0000BA   719 _T2IE	=	0x00ba
                           0000B9   720 _T1IE	=	0x00b9
                           0000B8   721 _DMAIE	=	0x00b8
                           0000C7   722 _STIF	=	0x00c7
                           0000C5   723 _P0IF	=	0x00c5
                           0000C4   724 _T4IF	=	0x00c4
                           0000C3   725 _T3IF	=	0x00c3
                           0000C2   726 _T2IF	=	0x00c2
                           0000C1   727 _T1IF	=	0x00c1
                           0000C0   728 _DMAIF	=	0x00c0
                           0000D7   729 _CY	=	0x00d7
                           0000D6   730 _AC	=	0x00d6
                           0000D5   731 _F0	=	0x00d5
                           0000D4   732 _RS1	=	0x00d4
                           0000D3   733 _RS0	=	0x00d3
                           0000D2   734 _OV	=	0x00d2
                           0000D1   735 _F1	=	0x00d1
                           0000D0   736 _P	=	0x00d0
                           0000E7   737 _ACC_7	=	0x00e7
                           0000E6   738 _ACC_6	=	0x00e6
                           0000E5   739 _ACC_5	=	0x00e5
                           0000E4   740 _ACC_4	=	0x00e4
                           0000E3   741 _ACC_3	=	0x00e3
                           0000E2   742 _ACC_2	=	0x00e2
                           0000E1   743 _ACC_1	=	0x00e1
                           0000E0   744 _ACC_0	=	0x00e0
                           0000EC   745 _WDTIF	=	0x00ec
                           0000EB   746 _P1IF	=	0x00eb
                           0000EA   747 _UTX1IF	=	0x00ea
                           0000E9   748 _UTX0IF	=	0x00e9
                           0000E8   749 _P2IF	=	0x00e8
                           0000F7   750 _B_7	=	0x00f7
                           0000F6   751 _B_6	=	0x00f6
                           0000F5   752 _B_5	=	0x00f5
                           0000F4   753 _B_4	=	0x00f4
                           0000F3   754 _B_3	=	0x00f3
                           0000F2   755 _B_2	=	0x00f2
                           0000F1   756 _B_1	=	0x00f1
                           0000F0   757 _B_0	=	0x00f0
                           0000DE   758 _OVFIM	=	0x00de
                           0000DD   759 _T4CH1IF	=	0x00dd
                           0000DC   760 _T4CH0IF	=	0x00dc
                           0000DB   761 _T4OVFIF	=	0x00db
                           0000DA   762 _T3CH1IF	=	0x00da
                           0000D9   763 _T3CH0IF	=	0x00d9
                           0000D8   764 _T3OVFIF	=	0x00d8
                           0000FF   765 _MODE	=	0x00ff
                           0000FE   766 _RE	=	0x00fe
                           0000FD   767 _SLAVE	=	0x00fd
                           0000FC   768 _FE	=	0x00fc
                           0000FB   769 _ERR	=	0x00fb
                           0000FA   770 _RX_BYTE	=	0x00fa
                           0000F9   771 _TX_BYTE	=	0x00f9
                           0000F8   772 _ACTIVE	=	0x00f8
                                    773 ;--------------------------------------------------------
                                    774 ; overlayable register banks
                                    775 ;--------------------------------------------------------
                                    776 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        777 	.ds 8
                                    778 ;--------------------------------------------------------
                                    779 ; internal ram data
                                    780 ;--------------------------------------------------------
                                    781 	.area DSEG    (DATA)
      000000                        782 _rf_flags:
      000000                        783 	.ds 1
                                    784 ;--------------------------------------------------------
                                    785 ; overlayable items in internal ram 
                                    786 ;--------------------------------------------------------
                                    787 ;--------------------------------------------------------
                                    788 ; indirectly addressable internal ram data
                                    789 ;--------------------------------------------------------
                                    790 	.area ISEG    (DATA)
                                    791 ;--------------------------------------------------------
                                    792 ; absolute internal ram data
                                    793 ;--------------------------------------------------------
                                    794 	.area IABS    (ABS,DATA)
                                    795 	.area IABS    (ABS,DATA)
                                    796 ;--------------------------------------------------------
                                    797 ; bit data
                                    798 ;--------------------------------------------------------
                                    799 	.area BSEG    (BIT)
                                    800 ;--------------------------------------------------------
                                    801 ; paged external ram data
                                    802 ;--------------------------------------------------------
                                    803 	.area PSEG    (PAG,XDATA)
                                    804 ;--------------------------------------------------------
                                    805 ; external ram data
                                    806 ;--------------------------------------------------------
                                    807 	.area XSEG    (XDATA)
                           0061A6   808 _MONMUX	=	0x61a6
                           0061A6   809 _OPAMPMC	=	0x61a6
                           006230   810 _I2CCFG	=	0x6230
                           006231   811 _I2CSTAT	=	0x6231
                           006232   812 _I2CDATA	=	0x6232
                           006233   813 _I2CADDR	=	0x6233
                           006234   814 _I2CWC	=	0x6234
                           006235   815 _I2CIO	=	0x6235
                           006243   816 _OBSSEL0	=	0x6243
                           006244   817 _OBSSEL1	=	0x6244
                           006245   818 _OBSSEL2	=	0x6245
                           006246   819 _OBSSEL3	=	0x6246
                           006247   820 _OBSSEL4	=	0x6247
                           006248   821 _OBSSEL5	=	0x6248
                           006249   822 _CHVER	=	0x6249
                           00624A   823 _CHIPID	=	0x624a
                           00624B   824 _TESTREG0	=	0x624b
                           006260   825 _DBGDATA	=	0x6260
                           006262   826 _SRCRC	=	0x6262
                           006264   827 _BATTMON	=	0x6264
                           006265   828 _IVCTRL	=	0x6265
                           006270   829 _FCTL	=	0x6270
                           006271   830 _FADDRL	=	0x6271
                           006272   831 _FADDRH	=	0x6272
                           006273   832 _FWDATA	=	0x6273
                           006276   833 _CHIPINFO0	=	0x6276
                           006277   834 _CHIPINFO1	=	0x6277
                           006281   835 _IRCTL	=	0x6281
                           006290   836 _CLD	=	0x6290
                           0062A0   837 _XX_T1CCTL0	=	0x62a0
                           0062A1   838 _XX_T1CCTL1	=	0x62a1
                           0062A2   839 _XX_T1CCTL2	=	0x62a2
                           0062A3   840 _T1CCTL3	=	0x62a3
                           0062A4   841 _T1CCTL4	=	0x62a4
                           0062A6   842 _XX_T1CC0L	=	0x62a6
                           0062A7   843 _XX_T1CC0H	=	0x62a7
                           0062A8   844 _XX_T1CC1L	=	0x62a8
                           0062A9   845 _XX_T1CC1H	=	0x62a9
                           0062AA   846 _XX_T1CC2L	=	0x62aa
                           0062AB   847 _XX_T1CC2H	=	0x62ab
                           0062AC   848 _T1CC3L	=	0x62ac
                           0062AD   849 _T1CC3H	=	0x62ad
                           0062AE   850 _T1CC4L	=	0x62ae
                           0062AF   851 _T1CC4H	=	0x62af
                           0062B0   852 _STCC	=	0x62b0
                           0062B1   853 _STCS	=	0x62b1
                           0062B2   854 _STCV0	=	0x62b2
                           0062B3   855 _STCV1	=	0x62b3
                           0062B4   856 _STCV2	=	0x62b4
                           0062C0   857 _OPAMPC	=	0x62c0
                           0062C1   858 _OPAMPS	=	0x62c1
                           0062D0   859 _CMPCTL	=	0x62d0
                           006000   860 _RFCORE_RAM	=	0x6000
                           006000   861 _RXFIFO	=	0x6000
                           006080   862 _TXFIFO	=	0x6080
                           006100   863 _SRC_ADDR_TABLE	=	0x6100
                           006160   864 _SRCRESMASK0	=	0x6160
                           006161   865 _SRCRESMASK1	=	0x6161
                           006162   866 _SRCRESMASK2	=	0x6162
                           006163   867 _SRCRESINDEX	=	0x6163
                           006164   868 _SRCEXTPENDEN0	=	0x6164
                           006165   869 _SRCEXTPENDEN1	=	0x6165
                           006166   870 _SRCEXTPENDEN2	=	0x6166
                           006167   871 _SRCSHORTPENDEN0	=	0x6167
                           006168   872 _SRCSHORTPENDEN1	=	0x6168
                           006169   873 _SRCSHORTPENDEN2	=	0x6169
                           00616A   874 _EXT_ADDR0	=	0x616a
                           00616B   875 _EXT_ADDR1	=	0x616b
                           00616C   876 _EXT_ADDR2	=	0x616c
                           00616D   877 _EXT_ADDR3	=	0x616d
                           00616E   878 _EXT_ADDR4	=	0x616e
                           00616F   879 _EXT_ADDR5	=	0x616f
                           006170   880 _EXT_ADDR6	=	0x6170
                           006171   881 _EXT_ADDR7	=	0x6171
                           006172   882 _PAN_ID0	=	0x6172
                           006173   883 _PAN_ID1	=	0x6173
                           006174   884 _SHORT_ADDR0	=	0x6174
                           006175   885 _SHORT_ADDR1	=	0x6175
                           006180   886 _FRMFILT0	=	0x6180
                           006181   887 _FRMFILT1	=	0x6181
                           006182   888 _SRCMATCH	=	0x6182
                           006183   889 _SRCSHORTEN0	=	0x6183
                           006184   890 _SRCSHORTEN1	=	0x6184
                           006185   891 _SRCSHORTEN2	=	0x6185
                           006186   892 _SRCEXTEN0	=	0x6186
                           006187   893 _SRCEXTEN1	=	0x6187
                           006188   894 _SRCEXTEN2	=	0x6188
                           006189   895 _FRMCTRL0	=	0x6189
                           00618A   896 _FRMCTRL1	=	0x618a
                           00618B   897 _RXENABLE	=	0x618b
                           00618C   898 _RXMASKSET	=	0x618c
                           00618D   899 _RXMASKCLR	=	0x618d
                           00618E   900 _FREQTUNE	=	0x618e
                           00618F   901 _FREQCTRL	=	0x618f
                           006190   902 _TXPOWER	=	0x6190
                           006191   903 _TXCTRL	=	0x6191
                           006192   904 _FSMSTAT0	=	0x6192
                           006193   905 _FSMSTAT1	=	0x6193
                           006194   906 _FIFOPCTRL	=	0x6194
                           006195   907 _FSMCTRL	=	0x6195
                           006196   908 _CCACTRL0	=	0x6196
                           006197   909 _CCACTRL1	=	0x6197
                           006198   910 _RSSI	=	0x6198
                           006199   911 _RSSISTAT	=	0x6199
                           00619A   912 _RXFIRST	=	0x619a
                           00619B   913 _RXFIFOCNT	=	0x619b
                           00619C   914 _TXFIFOCNT	=	0x619c
                           00619D   915 _RXFIRST_PTR	=	0x619d
                           00619E   916 _RXLAST_PTR	=	0x619e
                           00619F   917 _RXP1_PTR	=	0x619f
                           0061A1   918 _TXFIRST_PTR	=	0x61a1
                           0061A2   919 _TXLAST_PTR	=	0x61a2
                           0061A3   920 _RFIRQM0	=	0x61a3
                           0061A4   921 _RFIRQM1	=	0x61a4
                           0061A5   922 _RFERRM	=	0x61a5
                           0061A7   923 _RFRND	=	0x61a7
                           0061A8   924 _MDMCTRL0	=	0x61a8
                           0061A9   925 _MDMCTRL1	=	0x61a9
                           0061AA   926 _FREQEST	=	0x61aa
                           0061AB   927 _RXCTRL	=	0x61ab
                           0061AC   928 _FSCTRL	=	0x61ac
                           0061AD   929 _FSCAL0	=	0x61ad
                           0061AE   930 _FSCAL1	=	0x61ae
                           0061AF   931 _FSCAL2	=	0x61af
                           0061B0   932 _FSCAL3	=	0x61b0
                           0061B1   933 _AGCCTRL0	=	0x61b1
                           0061B2   934 _AGCCTRL1	=	0x61b2
                           0061B3   935 _AGCCTRL2	=	0x61b3
                           0061B4   936 _AGCCTRL3	=	0x61b4
                           0061B5   937 _ADCTEST0	=	0x61b5
                           0061B6   938 _ADCTEST1	=	0x61b6
                           0061B7   939 _ADCTEST2	=	0x61b7
                           0061B8   940 _MDMTEST0	=	0x61b8
                           0061B9   941 _MDMTEST1	=	0x61b9
                           0061BA   942 _DACTEST0	=	0x61ba
                           0061BB   943 _DACTEST1	=	0x61bb
                           0061BC   944 _DACTEST2	=	0x61bc
                           0061BD   945 _ATEST	=	0x61bd
                           0061BE   946 _PTEST0	=	0x61be
                           0061BF   947 _PTEST1	=	0x61bf
                           0061FA   948 _TXFILTCFG	=	0x61fa
                           0061EB   949 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   950 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   951 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   952 _CSPPROG0	=	0x61c0
                           0061C1   953 _CSPPROG1	=	0x61c1
                           0061C2   954 _CSPPROG2	=	0x61c2
                           0061C3   955 _CSPPROG3	=	0x61c3
                           0061C4   956 _CSPPROG4	=	0x61c4
                           0061C5   957 _CSPPROG5	=	0x61c5
                           0061C6   958 _CSPPROG6	=	0x61c6
                           0061C7   959 _CSPPROG7	=	0x61c7
                           0061C8   960 _CSPPROG8	=	0x61c8
                           0061C9   961 _CSPPROG9	=	0x61c9
                           0061CA   962 _CSPPROG10	=	0x61ca
                           0061CB   963 _CSPPROG11	=	0x61cb
                           0061CC   964 _CSPPROG12	=	0x61cc
                           0061CD   965 _CSPPROG13	=	0x61cd
                           0061CE   966 _CSPPROG14	=	0x61ce
                           0061CF   967 _CSPPROG15	=	0x61cf
                           0061D0   968 _CSPPROG16	=	0x61d0
                           0061D1   969 _CSPPROG17	=	0x61d1
                           0061D2   970 _CSPPROG18	=	0x61d2
                           0061D3   971 _CSPPROG19	=	0x61d3
                           0061D4   972 _CSPPROG20	=	0x61d4
                           0061D5   973 _CSPPROG21	=	0x61d5
                           0061D6   974 _CSPPROG22	=	0x61d6
                           0061D7   975 _CSPPROG23	=	0x61d7
                           0061E0   976 _CSPCTRL	=	0x61e0
                           0061E1   977 _CSPSTAT	=	0x61e1
                           0061E2   978 _CSPX	=	0x61e2
                           0061E3   979 _CSPY	=	0x61e3
                           0061E4   980 _CSPZ	=	0x61e4
                           0061E5   981 _CSPT	=	0x61e5
                           006200   982 _USBADDR	=	0x6200
                           006201   983 _USBPOW	=	0x6201
                           006202   984 _USBIIF	=	0x6202
                           006204   985 _USBOIF	=	0x6204
                           006206   986 _USBCIF	=	0x6206
                           006207   987 _USBIIE	=	0x6207
                           006209   988 _USBOIE	=	0x6209
                           00620B   989 _USBCIE	=	0x620b
                           00620C   990 _USBFRML	=	0x620c
                           00620D   991 _USBFRMH	=	0x620d
                           00620E   992 _USBINDEX	=	0x620e
                           00620F   993 _USBCTRL	=	0x620f
                           006210   994 _USBMAXI	=	0x6210
                           006211   995 _USBCS0	=	0x6211
                           006211   996 _USBCSIL	=	0x6211
                           006212   997 _USBCSIH	=	0x6212
                           006213   998 _USBMAXO	=	0x6213
                           006214   999 _USBCSOL	=	0x6214
                           006215  1000 _USBCSOH	=	0x6215
                           006216  1001 _USBCNT0	=	0x6216
                           006216  1002 _USBCNTL	=	0x6216
                           006217  1003 _USBCNTH	=	0x6217
                           006220  1004 _USBF0	=	0x6220
                           006222  1005 _USBF1	=	0x6222
                           006224  1006 _USBF2	=	0x6224
                           006226  1007 _USBF3	=	0x6226
                           006228  1008 _USBF4	=	0x6228
                           00622A  1009 _USBF5	=	0x622a
                           007080  1010 _X_P0	=	0x7080
                           007086  1011 _X_U0CSR	=	0x7086
                           007089  1012 _X_P0IFG	=	0x7089
                           00708A  1013 _X_P1IFG	=	0x708a
                           00708B  1014 _X_P2IFG	=	0x708b
                           00708C  1015 _X_PICTL	=	0x708c
                           00708D  1016 _X_P1IEN	=	0x708d
                           00708F  1017 _X_P0INP	=	0x708f
                           007090  1018 _X_P1	=	0x7090
                           007091  1019 _X_RFIRQF1	=	0x7091
                           007093  1020 _X_MPAGE	=	0x7093
                           007093  1021 _X__XPAGE	=	0x7093
                           007094  1022 _X_T2CTRL	=	0x7094
                           007095  1023 _X_ST0	=	0x7095
                           007096  1024 _X_ST1	=	0x7096
                           007097  1025 _X_ST2	=	0x7097
                           00709C  1026 _X_T2EVTCFG	=	0x709c
                           00709D  1027 _X_SLEEPSTA	=	0x709d
                           00709E  1028 _X_CLKCONSTA	=	0x709e
                           00709F  1029 _X_FMAP	=	0x709f
                           00709F  1030 _X_PSBANK	=	0x709f
                           0070A0  1031 _X_P2	=	0x70a0
                           0070A1  1032 _X_T2IRQF	=	0x70a1
                           0070A2  1033 _X_T2M0	=	0x70a2
                           0070A3  1034 _X_T2M1	=	0x70a3
                           0070A4  1035 _X_T2MOVF0	=	0x70a4
                           0070A5  1036 _X_T2MOVF1	=	0x70a5
                           0070A6  1037 _X_T2MOVF2	=	0x70a6
                           0070A7  1038 _X_T2IRQM	=	0x70a7
                           0070AB  1039 _X_P0IEN	=	0x70ab
                           0070AC  1040 _X_P2IEN	=	0x70ac
                           0070AD  1041 _X_STLOAD	=	0x70ad
                           0070AE  1042 _X_PMUX	=	0x70ae
                           0070AF  1043 _X_T1STAT	=	0x70af
                           0070B1  1044 _X_ENCDI	=	0x70b1
                           0070B2  1045 _X_ENCDO	=	0x70b2
                           0070B3  1046 _X_ENCCS	=	0x70b3
                           0070B4  1047 _X_ADCCON1	=	0x70b4
                           0070B5  1048 _X_ADCCON2	=	0x70b5
                           0070B6  1049 _X_ADCCON3	=	0x70b6
                           0070BA  1050 _X_ADCL	=	0x70ba
                           0070BB  1051 _X_ADCH	=	0x70bb
                           0070BC  1052 _X_RNDL	=	0x70bc
                           0070BD  1053 _X_RNDH	=	0x70bd
                           0070BE  1054 _X_SLEEPCMD	=	0x70be
                           0070BF  1055 _X_RFERRF	=	0x70bf
                           0070C1  1056 _X_U0DBUF	=	0x70c1
                           0070C2  1057 _X_U0BAUD	=	0x70c2
                           0070C3  1058 _X_T2MSEL	=	0x70c3
                           0070C4  1059 _X_U0UCR	=	0x70c4
                           0070C5  1060 _X_U0GCR	=	0x70c5
                           0070C6  1061 _X_CLKCONCMD	=	0x70c6
                           0070C7  1062 _X_MEMCTR	=	0x70c7
                           0070C9  1063 _X_WDCTL	=	0x70c9
                           0070CA  1064 _X_T3CNT	=	0x70ca
                           0070CB  1065 _X_T3CTL	=	0x70cb
                           0070CC  1066 _X_T3CCTL0	=	0x70cc
                           0070CD  1067 _X_T3CC0	=	0x70cd
                           0070CE  1068 _X_T3CCTL1	=	0x70ce
                           0070CF  1069 _X_T3CC1	=	0x70cf
                           0070D1  1070 _X_DMAIRQ	=	0x70d1
                           0070D2  1071 _X_DMA1CFGL	=	0x70d2
                           0070D3  1072 _X_DMA1CFGH	=	0x70d3
                           0070D4  1073 _X_DMA0CFGL	=	0x70d4
                           0070D5  1074 _X_DMA0CFGH	=	0x70d5
                           0070D6  1075 _X_DMAARM	=	0x70d6
                           0070D7  1076 _X_DMAREQ	=	0x70d7
                           0070D8  1077 _X_TIMIF	=	0x70d8
                           0070D9  1078 _X_RFD	=	0x70d9
                           0070DA  1079 _X_T1CC0L	=	0x70da
                           0070DB  1080 _X_T1CC0H	=	0x70db
                           0070DC  1081 _X_T1CC1L	=	0x70dc
                           0070DD  1082 _X_T1CC1H	=	0x70dd
                           0070DE  1083 _X_T1CC2L	=	0x70de
                           0070DF  1084 _X_T1CC2H	=	0x70df
                           0070E1  1085 _X_RFST	=	0x70e1
                           0070E2  1086 _X_T1CNTL	=	0x70e2
                           0070E3  1087 _X_T1CNTH	=	0x70e3
                           0070E4  1088 _X_T1CTL	=	0x70e4
                           0070E5  1089 _X_T1CCTL0	=	0x70e5
                           0070E6  1090 _X_T1CCTL1	=	0x70e6
                           0070E7  1091 _X_T1CCTL2	=	0x70e7
                           0070E9  1092 _X_RFIRQF0	=	0x70e9
                           0070EA  1093 _X_T4CNT	=	0x70ea
                           0070EB  1094 _X_T4CTL	=	0x70eb
                           0070EC  1095 _X_T4CCTL0	=	0x70ec
                           0070ED  1096 _X_T4CC0	=	0x70ed
                           0070EE  1097 _X_T4CCTL1	=	0x70ee
                           0070EF  1098 _X_T4CC1	=	0x70ef
                           0070F1  1099 _X_PERCFG	=	0x70f1
                           0070F2  1100 _X_APCFG	=	0x70f2
                           0070F3  1101 _X_P0SEL	=	0x70f3
                           0070F4  1102 _X_P1SEL	=	0x70f4
                           0070F5  1103 _X_P2SEL	=	0x70f5
                           0070F6  1104 _X_P1INP	=	0x70f6
                           0070F7  1105 _X_P2INP	=	0x70f7
                           0070F8  1106 _X_U1CSR	=	0x70f8
                           0070F9  1107 _X_U1DBUF	=	0x70f9
                           0070FA  1108 _X_U1BAUD	=	0x70fa
                           0070FB  1109 _X_U1UCR	=	0x70fb
                           0070FC  1110 _X_U1GCR	=	0x70fc
                           0070FD  1111 _X_P0DIR	=	0x70fd
                           0070FE  1112 _X_P1DIR	=	0x70fe
                           0070FF  1113 _X_P2DIR	=	0x70ff
                           007800  1114 _X_INFOPAGE	=	0x7800
                           00780C  1115 _X_IEEE_ADDR	=	0x780c
                                   1116 ;--------------------------------------------------------
                                   1117 ; absolute external ram data
                                   1118 ;--------------------------------------------------------
                                   1119 	.area XABS    (ABS,XDATA)
                                   1120 ;--------------------------------------------------------
                                   1121 ; external initialized ram data
                                   1122 ;--------------------------------------------------------
                                   1123 	.area XISEG   (XDATA)
                                   1124 	.area HOME    (CODE)
                                   1125 	.area GSINIT0 (CODE)
                                   1126 	.area GSINIT1 (CODE)
                                   1127 	.area GSINIT2 (CODE)
                                   1128 	.area GSINIT3 (CODE)
                                   1129 	.area GSINIT4 (CODE)
                                   1130 	.area GSINIT5 (CODE)
                                   1131 	.area GSINIT  (CODE)
                                   1132 	.area GSFINAL (CODE)
                                   1133 	.area CSEG    (CODE)
                                   1134 ;--------------------------------------------------------
                                   1135 ; global & static initialisations
                                   1136 ;--------------------------------------------------------
                                   1137 	.area HOME    (CODE)
                                   1138 	.area GSINIT  (CODE)
                                   1139 	.area GSFINAL (CODE)
                                   1140 	.area GSINIT  (CODE)
                                   1141 ;--------------------------------------------------------
                                   1142 ; Home
                                   1143 ;--------------------------------------------------------
                                   1144 	.area HOME    (CODE)
                                   1145 	.area HOME    (CODE)
                                   1146 ;--------------------------------------------------------
                                   1147 ; code
                                   1148 ;--------------------------------------------------------
                                   1149 	.area BANK1   (CODE)
                                   1150 ;------------------------------------------------------------
                                   1151 ;Allocation info for local variables in function 'get_channel'
                                   1152 ;------------------------------------------------------------
                                   1153 ;	../../cpu/cc253x/dev/cc2530-rf.c:158: get_channel()
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function get_channel
                                   1156 ;	-----------------------------------------
      000000                       1157 _get_channel:
                           000007  1158 	ar7 = 0x07
                           000006  1159 	ar6 = 0x06
                           000005  1160 	ar5 = 0x05
                           000004  1161 	ar4 = 0x04
                           000003  1162 	ar3 = 0x03
                           000002  1163 	ar2 = 0x02
                           000001  1164 	ar1 = 0x01
                           000000  1165 	ar0 = 0x00
                                   1166 ;	../../cpu/cc253x/dev/cc2530-rf.c:160: return (uint8_t)((FREQCTRL + 44) / 5);
      000000 90 61 8F         [24] 1167 	mov	dptr,#_FREQCTRL
      000003 E0               [24] 1168 	movx	a,@dptr
      000004 FF               [12] 1169 	mov	r7,a
      000005 7E 00            [12] 1170 	mov	r6,#0x00
      000007 74 2C            [12] 1171 	mov	a,#0x2C
      000009 2F               [12] 1172 	add	a,r7
      00000A FF               [12] 1173 	mov	r7,a
      00000B E4               [12] 1174 	clr	a
      00000C 3E               [12] 1175 	addc	a,r6
      00000D FE               [12] 1176 	mov	r6,a
      00000E 74 05            [12] 1177 	mov	a,#0x05
      000010 C0 E0            [24] 1178 	push	acc
      000012 E4               [12] 1179 	clr	a
      000013 C0 E0            [24] 1180 	push	acc
      000015 8F 82            [24] 1181 	mov	dpl,r7
      000017 8E 83            [24] 1182 	mov	dph,r6
      000019 12r00r00         [24] 1183 	lcall	__divsint
      00001C AE 82            [24] 1184 	mov	r6,dpl
      00001E AF 83            [24] 1185 	mov	r7,dph
      000020 15 81            [12] 1186 	dec	sp
      000022 15 81            [12] 1187 	dec	sp
      000024 8E 82            [24] 1188 	mov	dpl,r6
      000026 02r00r00         [24] 1189 	ljmp	__sdcc_banked_ret
                                   1190 ;------------------------------------------------------------
                                   1191 ;Allocation info for local variables in function 'set_channel'
                                   1192 ;------------------------------------------------------------
                                   1193 ;channel                   Allocated to registers r7 
                                   1194 ;------------------------------------------------------------
                                   1195 ;	../../cpu/cc253x/dev/cc2530-rf.c:170: set_channel(uint8_t channel)
                                   1196 ;	-----------------------------------------
                                   1197 ;	 function set_channel
                                   1198 ;	-----------------------------------------
      000029                       1199 _set_channel:
      000029 AF 82            [24] 1200 	mov	r7,dpl
                                   1201 ;	../../cpu/cc253x/dev/cc2530-rf.c:174: if((channel < CC2530_RF_CHANNEL_MIN) || (channel > CC2530_RF_CHANNEL_MAX)) {
      00002B BF 0B 00         [24] 1202 	cjne	r7,#0x0B,00109$
      00002E                       1203 00109$:
      00002E 40 05            [24] 1204 	jc	00101$
      000030 EF               [12] 1205 	mov	a,r7
      000031 24 E5            [12] 1206 	add	a,#0xff - 0x1A
      000033 50 05            [24] 1207 	jnc	00102$
      000035                       1208 00101$:
                                   1209 ;	../../cpu/cc253x/dev/cc2530-rf.c:175: return CC2530_RF_CHANNEL_SET_ERROR;
      000035 75 82 FF         [24] 1210 	mov	dpl,#0xFF
      000038 80 29            [24] 1211 	sjmp	00104$
      00003A                       1212 00102$:
                                   1213 ;	../../cpu/cc253x/dev/cc2530-rf.c:180: off();
      00003A C0 07            [24] 1214 	push	ar7
      00003C 78r94            [12] 1215 	mov	r0,#_off
      00003E 79s05            [12] 1216 	mov	r1,#(_off >> 8)
      000040 7As00            [12] 1217 	mov	r2,#(_off >> 16)
      000042 12r00r00         [24] 1218 	lcall	__sdcc_banked_call
      000045 D0 07            [24] 1219 	pop	ar7
                                   1220 ;	../../cpu/cc253x/dev/cc2530-rf.c:182: + (channel - CC2530_RF_CHANNEL_MIN) * CC2530_RF_CHANNEL_SPACING);
      000047 EF               [12] 1221 	mov	a,r7
      000048 24 F5            [12] 1222 	add	a,#0xF5
      00004A 75 F0 05         [24] 1223 	mov	b,#0x05
      00004D A4               [48] 1224 	mul	ab
      00004E 90 61 8F         [24] 1225 	mov	dptr,#_FREQCTRL
      000051 24 0B            [12] 1226 	add	a,#0x0B
      000053 F0               [24] 1227 	movx	@dptr,a
                                   1228 ;	../../cpu/cc253x/dev/cc2530-rf.c:183: on();
      000054 C0 07            [24] 1229 	push	ar7
      000056 78r7D            [12] 1230 	mov	r0,#_on
      000058 79s05            [12] 1231 	mov	r1,#(_on >> 8)
      00005A 7As00            [12] 1232 	mov	r2,#(_on >> 16)
      00005C 12r00r00         [24] 1233 	lcall	__sdcc_banked_call
      00005F D0 07            [24] 1234 	pop	ar7
                                   1235 ;	../../cpu/cc253x/dev/cc2530-rf.c:185: return (int8_t)channel;
      000061 8F 82            [24] 1236 	mov	dpl,r7
      000063                       1237 00104$:
      000063 02r00r00         [24] 1238 	ljmp	__sdcc_banked_ret
                                   1239 ;------------------------------------------------------------
                                   1240 ;Allocation info for local variables in function 'get_pan_id'
                                   1241 ;------------------------------------------------------------
                                   1242 ;	../../cpu/cc253x/dev/cc2530-rf.c:189: get_pan_id(void)
                                   1243 ;	-----------------------------------------
                                   1244 ;	 function get_pan_id
                                   1245 ;	-----------------------------------------
      000066                       1246 _get_pan_id:
                                   1247 ;	../../cpu/cc253x/dev/cc2530-rf.c:191: return (radio_value_t)(PAN_ID1 << 8 | PAN_ID0);
      000066 90 61 73         [24] 1248 	mov	dptr,#_PAN_ID1
      000069 E0               [24] 1249 	movx	a,@dptr
      00006A FE               [12] 1250 	mov	r6,a
      00006B 7F 00            [12] 1251 	mov	r7,#0x00
      00006D 90 61 72         [24] 1252 	mov	dptr,#_PAN_ID0
      000070 E0               [24] 1253 	movx	a,@dptr
      000071 FD               [12] 1254 	mov	r5,a
      000072 7C 00            [12] 1255 	mov	r4,#0x00
      000074 42 07            [12] 1256 	orl	ar7,a
      000076 EC               [12] 1257 	mov	a,r4
      000077 42 06            [12] 1258 	orl	ar6,a
      000079 8F 82            [24] 1259 	mov	dpl,r7
      00007B 8E 83            [24] 1260 	mov	dph,r6
      00007D 02r00r00         [24] 1261 	ljmp	__sdcc_banked_ret
                                   1262 ;------------------------------------------------------------
                                   1263 ;Allocation info for local variables in function 'set_pan_id'
                                   1264 ;------------------------------------------------------------
                                   1265 ;pan                       Allocated to registers r6 r7 
                                   1266 ;------------------------------------------------------------
                                   1267 ;	../../cpu/cc253x/dev/cc2530-rf.c:195: set_pan_id(uint16_t pan)
                                   1268 ;	-----------------------------------------
                                   1269 ;	 function set_pan_id
                                   1270 ;	-----------------------------------------
      000080                       1271 _set_pan_id:
      000080 AE 82            [24] 1272 	mov	r6,dpl
      000082 AF 83            [24] 1273 	mov	r7,dph
                                   1274 ;	../../cpu/cc253x/dev/cc2530-rf.c:197: PAN_ID0 = pan & 0xFF;
      000084 8E 04            [24] 1275 	mov	ar4,r6
      000086 7D 00            [12] 1276 	mov	r5,#0x00
      000088 90 61 72         [24] 1277 	mov	dptr,#_PAN_ID0
      00008B EC               [12] 1278 	mov	a,r4
      00008C F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	../../cpu/cc253x/dev/cc2530-rf.c:198: PAN_ID1 = pan >> 8;
      00008D 90 61 73         [24] 1281 	mov	dptr,#_PAN_ID1
      000090 EF               [12] 1282 	mov	a,r7
      000091 F0               [24] 1283 	movx	@dptr,a
      000092 02r00r00         [24] 1284 	ljmp	__sdcc_banked_ret
                                   1285 ;------------------------------------------------------------
                                   1286 ;Allocation info for local variables in function 'get_short_addr'
                                   1287 ;------------------------------------------------------------
                                   1288 ;	../../cpu/cc253x/dev/cc2530-rf.c:202: get_short_addr(void)
                                   1289 ;	-----------------------------------------
                                   1290 ;	 function get_short_addr
                                   1291 ;	-----------------------------------------
      000095                       1292 _get_short_addr:
                                   1293 ;	../../cpu/cc253x/dev/cc2530-rf.c:204: return (radio_value_t)(SHORT_ADDR1 << 8 | SHORT_ADDR0);
      000095 90 61 75         [24] 1294 	mov	dptr,#_SHORT_ADDR1
      000098 E0               [24] 1295 	movx	a,@dptr
      000099 FE               [12] 1296 	mov	r6,a
      00009A 7F 00            [12] 1297 	mov	r7,#0x00
      00009C 90 61 74         [24] 1298 	mov	dptr,#_SHORT_ADDR0
      00009F E0               [24] 1299 	movx	a,@dptr
      0000A0 FD               [12] 1300 	mov	r5,a
      0000A1 7C 00            [12] 1301 	mov	r4,#0x00
      0000A3 42 07            [12] 1302 	orl	ar7,a
      0000A5 EC               [12] 1303 	mov	a,r4
      0000A6 42 06            [12] 1304 	orl	ar6,a
      0000A8 8F 82            [24] 1305 	mov	dpl,r7
      0000AA 8E 83            [24] 1306 	mov	dph,r6
      0000AC 02r00r00         [24] 1307 	ljmp	__sdcc_banked_ret
                                   1308 ;------------------------------------------------------------
                                   1309 ;Allocation info for local variables in function 'set_short_addr'
                                   1310 ;------------------------------------------------------------
                                   1311 ;addr                      Allocated to registers r6 r7 
                                   1312 ;------------------------------------------------------------
                                   1313 ;	../../cpu/cc253x/dev/cc2530-rf.c:208: set_short_addr(uint16_t addr)
                                   1314 ;	-----------------------------------------
                                   1315 ;	 function set_short_addr
                                   1316 ;	-----------------------------------------
      0000AF                       1317 _set_short_addr:
      0000AF AE 82            [24] 1318 	mov	r6,dpl
      0000B1 AF 83            [24] 1319 	mov	r7,dph
                                   1320 ;	../../cpu/cc253x/dev/cc2530-rf.c:210: SHORT_ADDR0 = addr & 0xFF;
      0000B3 8E 04            [24] 1321 	mov	ar4,r6
      0000B5 7D 00            [12] 1322 	mov	r5,#0x00
      0000B7 90 61 74         [24] 1323 	mov	dptr,#_SHORT_ADDR0
      0000BA EC               [12] 1324 	mov	a,r4
      0000BB F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	../../cpu/cc253x/dev/cc2530-rf.c:211: SHORT_ADDR1 = addr >> 8;
      0000BC 90 61 75         [24] 1327 	mov	dptr,#_SHORT_ADDR1
      0000BF EF               [12] 1328 	mov	a,r7
      0000C0 F0               [24] 1329 	movx	@dptr,a
      0000C1 02r00r00         [24] 1330 	ljmp	__sdcc_banked_ret
                                   1331 ;------------------------------------------------------------
                                   1332 ;Allocation info for local variables in function 'get_rssi'
                                   1333 ;------------------------------------------------------------
                                   1334 ;rssi                      Allocated to registers r7 
                                   1335 ;------------------------------------------------------------
                                   1336 ;	../../cpu/cc253x/dev/cc2530-rf.c:222: get_rssi(void)
                                   1337 ;	-----------------------------------------
                                   1338 ;	 function get_rssi
                                   1339 ;	-----------------------------------------
      0000C4                       1340 _get_rssi:
                                   1341 ;	../../cpu/cc253x/dev/cc2530-rf.c:227: if(RXENABLE == 0) {
      0000C4 90 61 8B         [24] 1342 	mov	dptr,#_RXENABLE
      0000C7 E0               [24] 1343 	movx	a,@dptr
      0000C8 FF               [12] 1344 	mov	r7,a
      0000C9 70 0C            [24] 1345 	jnz	00103$
                                   1346 ;	../../cpu/cc253x/dev/cc2530-rf.c:228: rf_flags |= WAS_OFF;
      0000CB 43*00 10         [24] 1347 	orl	_rf_flags,#0x10
                                   1348 ;	../../cpu/cc253x/dev/cc2530-rf.c:229: on();
      0000CE 78r7D            [12] 1349 	mov	r0,#_on
      0000D0 79s05            [12] 1350 	mov	r1,#(_on >> 8)
      0000D2 7As00            [12] 1351 	mov	r2,#(_on >> 16)
      0000D4 12r00r00         [24] 1352 	lcall	__sdcc_banked_call
                                   1353 ;	../../cpu/cc253x/dev/cc2530-rf.c:233: while((RSSISTAT & RSSISTAT_RSSI_VALID) == 0);
      0000D7                       1354 00103$:
      0000D7 90 61 99         [24] 1355 	mov	dptr,#_RSSISTAT
      0000DA E0               [24] 1356 	movx	a,@dptr
      0000DB FF               [12] 1357 	mov	r7,a
      0000DC 30 E0 F8         [24] 1358 	jnb	acc.0,00103$
                                   1359 ;	../../cpu/cc253x/dev/cc2530-rf.c:235: rssi = (radio_value_t)RSSI - RSSI_OFFSET;
      0000DF 90 61 98         [24] 1360 	mov	dptr,#_RSSI
      0000E2 E0               [24] 1361 	movx	a,@dptr
      0000E3 24 B7            [12] 1362 	add	a,#0xB7
      0000E5 FF               [12] 1363 	mov	r7,a
                                   1364 ;	../../cpu/cc253x/dev/cc2530-rf.c:238: if((rf_flags & WAS_OFF) == WAS_OFF) {
      0000E6 74 10            [12] 1365 	mov	a,#0x10
      0000E8 55*00            [12] 1366 	anl	a,_rf_flags
      0000EA FE               [12] 1367 	mov	r6,a
      0000EB BE 10 14         [24] 1368 	cjne	r6,#0x10,00107$
                                   1369 ;	../../cpu/cc253x/dev/cc2530-rf.c:239: rf_flags &= ~WAS_OFF;
      0000EE AE*00            [24] 1370 	mov	r6,_rf_flags
      0000F0 74 EF            [12] 1371 	mov	a,#0xEF
      0000F2 5E               [12] 1372 	anl	a,r6
      0000F3 F5*00            [12] 1373 	mov	_rf_flags,a
                                   1374 ;	../../cpu/cc253x/dev/cc2530-rf.c:240: off();
      0000F5 C0 07            [24] 1375 	push	ar7
      0000F7 78r94            [12] 1376 	mov	r0,#_off
      0000F9 79s05            [12] 1377 	mov	r1,#(_off >> 8)
      0000FB 7As00            [12] 1378 	mov	r2,#(_off >> 16)
      0000FD 12r00r00         [24] 1379 	lcall	__sdcc_banked_call
      000100 D0 07            [24] 1380 	pop	ar7
      000102                       1381 00107$:
                                   1382 ;	../../cpu/cc253x/dev/cc2530-rf.c:243: return rssi;
      000102 EF               [12] 1383 	mov	a,r7
      000103 33               [12] 1384 	rlc	a
      000104 95 E0            [12] 1385 	subb	a,acc
      000106 FE               [12] 1386 	mov	r6,a
      000107 8F 82            [24] 1387 	mov	dpl,r7
      000109 8E 83            [24] 1388 	mov	dph,r6
      00010B 02r00r00         [24] 1389 	ljmp	__sdcc_banked_ret
                                   1390 ;------------------------------------------------------------
                                   1391 ;Allocation info for local variables in function 'get_cca_threshold'
                                   1392 ;------------------------------------------------------------
                                   1393 ;	../../cpu/cc253x/dev/cc2530-rf.c:248: get_cca_threshold(void)
                                   1394 ;	-----------------------------------------
                                   1395 ;	 function get_cca_threshold
                                   1396 ;	-----------------------------------------
      00010E                       1397 _get_cca_threshold:
                                   1398 ;	../../cpu/cc253x/dev/cc2530-rf.c:250: return (int8_t)CCACTRL0 - RSSI_OFFSET;
      00010E 90 61 96         [24] 1399 	mov	dptr,#_CCACTRL0
      000111 E0               [24] 1400 	movx	a,@dptr
      000112 FF               [12] 1401 	mov	r7,a
      000113 33               [12] 1402 	rlc	a
      000114 95 E0            [12] 1403 	subb	a,acc
      000116 FE               [12] 1404 	mov	r6,a
      000117 EF               [12] 1405 	mov	a,r7
      000118 24 B7            [12] 1406 	add	a,#0xB7
      00011A FF               [12] 1407 	mov	r7,a
      00011B EE               [12] 1408 	mov	a,r6
      00011C 34 FF            [12] 1409 	addc	a,#0xFF
      00011E FE               [12] 1410 	mov	r6,a
      00011F 8F 82            [24] 1411 	mov	dpl,r7
      000121 8E 83            [24] 1412 	mov	dph,r6
      000123 02r00r00         [24] 1413 	ljmp	__sdcc_banked_ret
                                   1414 ;------------------------------------------------------------
                                   1415 ;Allocation info for local variables in function 'set_cca_threshold'
                                   1416 ;------------------------------------------------------------
                                   1417 ;value                     Allocated to registers r6 r7 
                                   1418 ;------------------------------------------------------------
                                   1419 ;	../../cpu/cc253x/dev/cc2530-rf.c:255: set_cca_threshold(radio_value_t value)
                                   1420 ;	-----------------------------------------
                                   1421 ;	 function set_cca_threshold
                                   1422 ;	-----------------------------------------
      000126                       1423 _set_cca_threshold:
      000126 AE 82            [24] 1424 	mov	r6,dpl
      000128 AF 83            [24] 1425 	mov	r7,dph
                                   1426 ;	../../cpu/cc253x/dev/cc2530-rf.c:257: CCACTRL0 = (value + RSSI_OFFSET) & 0xFF;
      00012A 90 61 96         [24] 1427 	mov	dptr,#_CCACTRL0
      00012D 74 49            [12] 1428 	mov	a,#0x49
      00012F 2E               [12] 1429 	add	a,r6
      000130 F0               [24] 1430 	movx	@dptr,a
      000131 02r00r00         [24] 1431 	ljmp	__sdcc_banked_ret
                                   1432 ;------------------------------------------------------------
                                   1433 ;Allocation info for local variables in function 'get_tx_power'
                                   1434 ;------------------------------------------------------------
                                   1435 ;i                         Allocated to registers r5 r6 
                                   1436 ;reg_val                   Allocated to registers r7 
                                   1437 ;sloc0                     Allocated to stack - sp -1
                                   1438 ;------------------------------------------------------------
                                   1439 ;	../../cpu/cc253x/dev/cc2530-rf.c:262: get_tx_power(void)
                                   1440 ;	-----------------------------------------
                                   1441 ;	 function get_tx_power
                                   1442 ;	-----------------------------------------
      000134                       1443 _get_tx_power:
      000134 05 81            [12] 1444 	inc	sp
      000136 05 81            [12] 1445 	inc	sp
                                   1446 ;	../../cpu/cc253x/dev/cc2530-rf.c:265: uint8_t reg_val = TXPOWER;
      000138 90 61 90         [24] 1447 	mov	dptr,#_TXPOWER
      00013B E0               [24] 1448 	movx	a,@dptr
      00013C FF               [12] 1449 	mov	r7,a
                                   1450 ;	../../cpu/cc253x/dev/cc2530-rf.c:267: if(TXCTRL == CC2530_RF_TX_POWER_TXCTRL_MIN_VAL) {
      00013D 90 61 91         [24] 1451 	mov	dptr,#_TXCTRL
      000140 E0               [24] 1452 	movx	a,@dptr
      000141 FE               [12] 1453 	mov	r6,a
      000142 BE 09 10         [24] 1454 	cjne	r6,#0x09,00112$
                                   1455 ;	../../cpu/cc253x/dev/cc2530-rf.c:268: return OUTPUT_POWER_MIN;
      000145 90r00r30         [24] 1456 	mov	dptr,#(_output_power + 0x0030)
      000148 E4               [12] 1457 	clr	a
      000149 93               [24] 1458 	movc	a,@a+dptr
      00014A FD               [12] 1459 	mov	r5,a
      00014B A3               [24] 1460 	inc	dptr
      00014C E4               [12] 1461 	clr	a
      00014D 93               [24] 1462 	movc	a,@a+dptr
      00014E FE               [12] 1463 	mov	r6,a
      00014F 8D 82            [24] 1464 	mov	dpl,r5
      000151 8E 83            [24] 1465 	mov	dph,r6
                                   1466 ;	../../cpu/cc253x/dev/cc2530-rf.c:277: for(i = 0; i < OUTPUT_CONFIG_COUNT; i++) {
      000153 80 66            [24] 1467 	sjmp	00108$
      000155                       1468 00112$:
      000155 7D 00            [12] 1469 	mov	r5,#0x00
      000157 7E 00            [12] 1470 	mov	r6,#0x00
      000159 7B 00            [12] 1471 	mov	r3,#0x00
      00015B 7C 00            [12] 1472 	mov	r4,#0x00
      00015D                       1473 00106$:
                                   1474 ;	../../cpu/cc253x/dev/cc2530-rf.c:278: if(reg_val >= output_power[i].txpower_val) {
      00015D A8 81            [24] 1475 	mov	r0,sp
      00015F 18               [12] 1476 	dec	r0
      000160 EB               [12] 1477 	mov	a,r3
      000161 24r00            [12] 1478 	add	a,#_output_power
      000163 F6               [12] 1479 	mov	@r0,a
      000164 EC               [12] 1480 	mov	a,r4
      000165 34s00            [12] 1481 	addc	a,#(_output_power >> 8)
      000167 08               [12] 1482 	inc	r0
      000168 F6               [12] 1483 	mov	@r0,a
      000169 A8 81            [24] 1484 	mov	r0,sp
      00016B 18               [12] 1485 	dec	r0
      00016C 86 82            [24] 1486 	mov	dpl,@r0
      00016E 08               [12] 1487 	inc	r0
      00016F 86 83            [24] 1488 	mov	dph,@r0
      000171 A3               [24] 1489 	inc	dptr
      000172 A3               [24] 1490 	inc	dptr
      000173 E4               [12] 1491 	clr	a
      000174 93               [24] 1492 	movc	a,@a+dptr
      000175 FA               [12] 1493 	mov	r2,a
      000176 C3               [12] 1494 	clr	c
      000177 EF               [12] 1495 	mov	a,r7
      000178 9A               [12] 1496 	subb	a,r2
      000179 40 1B            [24] 1497 	jc	00107$
                                   1498 ;	../../cpu/cc253x/dev/cc2530-rf.c:279: return output_power[i].power;
      00017B A8 81            [24] 1499 	mov	r0,sp
      00017D 18               [12] 1500 	dec	r0
      00017E 86 82            [24] 1501 	mov	dpl,@r0
      000180 08               [12] 1502 	inc	r0
      000181 86 83            [24] 1503 	mov	dph,@r0
      000183 E4               [12] 1504 	clr	a
      000184 93               [24] 1505 	movc	a,@a+dptr
      000185 18               [12] 1506 	dec	r0
      000186 F6               [12] 1507 	mov	@r0,a
      000187 A3               [24] 1508 	inc	dptr
      000188 E4               [12] 1509 	clr	a
      000189 93               [24] 1510 	movc	a,@a+dptr
      00018A 08               [12] 1511 	inc	r0
      00018B F6               [12] 1512 	mov	@r0,a
      00018C A8 81            [24] 1513 	mov	r0,sp
      00018E 18               [12] 1514 	dec	r0
      00018F 86 82            [24] 1515 	mov	dpl,@r0
      000191 08               [12] 1516 	inc	r0
      000192 86 83            [24] 1517 	mov	dph,@r0
      000194 80 25            [24] 1518 	sjmp	00108$
      000196                       1519 00107$:
                                   1520 ;	../../cpu/cc253x/dev/cc2530-rf.c:277: for(i = 0; i < OUTPUT_CONFIG_COUNT; i++) {
      000196 74 03            [12] 1521 	mov	a,#0x03
      000198 2B               [12] 1522 	add	a,r3
      000199 FB               [12] 1523 	mov	r3,a
      00019A E4               [12] 1524 	clr	a
      00019B 3C               [12] 1525 	addc	a,r4
      00019C FC               [12] 1526 	mov	r4,a
      00019D 0D               [12] 1527 	inc	r5
      00019E BD 00 01         [24] 1528 	cjne	r5,#0x00,00125$
      0001A1 0E               [12] 1529 	inc	r6
      0001A2                       1530 00125$:
      0001A2 C3               [12] 1531 	clr	c
      0001A3 ED               [12] 1532 	mov	a,r5
      0001A4 94 11            [12] 1533 	subb	a,#0x11
      0001A6 EE               [12] 1534 	mov	a,r6
      0001A7 64 80            [12] 1535 	xrl	a,#0x80
      0001A9 94 80            [12] 1536 	subb	a,#0x80
      0001AB 40 B0            [24] 1537 	jc	00106$
                                   1538 ;	../../cpu/cc253x/dev/cc2530-rf.c:282: return OUTPUT_POWER_MIN;
      0001AD 90r00r30         [24] 1539 	mov	dptr,#(_output_power + 0x0030)
      0001B0 E4               [12] 1540 	clr	a
      0001B1 93               [24] 1541 	movc	a,@a+dptr
      0001B2 FE               [12] 1542 	mov	r6,a
      0001B3 A3               [24] 1543 	inc	dptr
      0001B4 E4               [12] 1544 	clr	a
      0001B5 93               [24] 1545 	movc	a,@a+dptr
      0001B6 FF               [12] 1546 	mov	r7,a
      0001B7 8E 82            [24] 1547 	mov	dpl,r6
      0001B9 8F 83            [24] 1548 	mov	dph,r7
      0001BB                       1549 00108$:
      0001BB 15 81            [12] 1550 	dec	sp
      0001BD 15 81            [12] 1551 	dec	sp
      0001BF 02r00r00         [24] 1552 	ljmp	__sdcc_banked_ret
                                   1553 ;------------------------------------------------------------
                                   1554 ;Allocation info for local variables in function 'set_tx_power'
                                   1555 ;------------------------------------------------------------
                                   1556 ;power                     Allocated to registers r6 r7 
                                   1557 ;i                         Allocated to registers r4 r5 
                                   1558 ;------------------------------------------------------------
                                   1559 ;	../../cpu/cc253x/dev/cc2530-rf.c:292: set_tx_power(radio_value_t power)
                                   1560 ;	-----------------------------------------
                                   1561 ;	 function set_tx_power
                                   1562 ;	-----------------------------------------
      0001C2                       1563 _set_tx_power:
      0001C2 AE 82            [24] 1564 	mov	r6,dpl
      0001C4 AF 83            [24] 1565 	mov	r7,dph
                                   1566 ;	../../cpu/cc253x/dev/cc2530-rf.c:296: if(power <= output_power[OUTPUT_CONFIG_COUNT - 1].power) {
      0001C6 90r00r30         [24] 1567 	mov	dptr,#(_output_power + 0x0030)
      0001C9 E4               [12] 1568 	clr	a
      0001CA 93               [24] 1569 	movc	a,@a+dptr
      0001CB FC               [12] 1570 	mov	r4,a
      0001CC A3               [24] 1571 	inc	dptr
      0001CD E4               [12] 1572 	clr	a
      0001CE 93               [24] 1573 	movc	a,@a+dptr
      0001CF FD               [12] 1574 	mov	r5,a
      0001D0 C3               [12] 1575 	clr	c
      0001D1 EC               [12] 1576 	mov	a,r4
      0001D2 9E               [12] 1577 	subb	a,r6
      0001D3 ED               [12] 1578 	mov	a,r5
      0001D4 64 80            [12] 1579 	xrl	a,#0x80
      0001D6 8F F0            [24] 1580 	mov	b,r7
      0001D8 63 F0 80         [24] 1581 	xrl	b,#0x80
      0001DB 95 F0            [12] 1582 	subb	a,b
      0001DD 40 12            [24] 1583 	jc	00112$
                                   1584 ;	../../cpu/cc253x/dev/cc2530-rf.c:297: TXCTRL = CC2530_RF_TX_POWER_TXCTRL_MIN_VAL;
      0001DF 90 61 91         [24] 1585 	mov	dptr,#_TXCTRL
      0001E2 74 09            [12] 1586 	mov	a,#0x09
      0001E4 F0               [24] 1587 	movx	@dptr,a
                                   1588 ;	../../cpu/cc253x/dev/cc2530-rf.c:298: TXPOWER = output_power[OUTPUT_CONFIG_COUNT - 1].txpower_val;
      0001E5 90r00r32         [24] 1589 	mov	dptr,#(_output_power + 0x0032)
      0001E8 E4               [12] 1590 	clr	a
      0001E9 93               [24] 1591 	movc	a,@a+dptr
      0001EA FD               [12] 1592 	mov	r5,a
      0001EB 90 61 90         [24] 1593 	mov	dptr,#_TXPOWER
      0001EE F0               [24] 1594 	movx	@dptr,a
                                   1595 ;	../../cpu/cc253x/dev/cc2530-rf.c:299: return;
                                   1596 ;	../../cpu/cc253x/dev/cc2530-rf.c:302: for(i = OUTPUT_CONFIG_COUNT - 2; i >= 0; --i) {
      0001EF 80 56            [24] 1597 	sjmp	00108$
      0001F1                       1598 00112$:
      0001F1 7C 0F            [12] 1599 	mov	r4,#0x0F
      0001F3 7D 00            [12] 1600 	mov	r5,#0x00
      0001F5 7A 2D            [12] 1601 	mov	r2,#0x2D
      0001F7 7B 00            [12] 1602 	mov	r3,#0x00
      0001F9                       1603 00106$:
                                   1604 ;	../../cpu/cc253x/dev/cc2530-rf.c:303: if(power <= output_power[i].power) {
      0001F9 EA               [12] 1605 	mov	a,r2
      0001FA 24r00            [12] 1606 	add	a,#_output_power
      0001FC F5 82            [12] 1607 	mov	dpl,a
      0001FE EB               [12] 1608 	mov	a,r3
      0001FF 34s00            [12] 1609 	addc	a,#(_output_power >> 8)
      000201 F5 83            [12] 1610 	mov	dph,a
      000203 E4               [12] 1611 	clr	a
      000204 93               [24] 1612 	movc	a,@a+dptr
      000205 F8               [12] 1613 	mov	r0,a
      000206 A3               [24] 1614 	inc	dptr
      000207 E4               [12] 1615 	clr	a
      000208 93               [24] 1616 	movc	a,@a+dptr
      000209 F9               [12] 1617 	mov	r1,a
      00020A C3               [12] 1618 	clr	c
      00020B E8               [12] 1619 	mov	a,r0
      00020C 9E               [12] 1620 	subb	a,r6
      00020D E9               [12] 1621 	mov	a,r1
      00020E 64 80            [12] 1622 	xrl	a,#0x80
      000210 8F F0            [24] 1623 	mov	b,r7
      000212 63 F0 80         [24] 1624 	xrl	b,#0x80
      000215 95 F0            [12] 1625 	subb	a,b
      000217 40 1D            [24] 1626 	jc	00107$
                                   1627 ;	../../cpu/cc253x/dev/cc2530-rf.c:305: TXCTRL = CC2530_RF_TX_POWER_TXCTRL_DEF_VAL;
      000219 90 61 91         [24] 1628 	mov	dptr,#_TXCTRL
      00021C 74 69            [12] 1629 	mov	a,#0x69
      00021E F0               [24] 1630 	movx	@dptr,a
                                   1631 ;	../../cpu/cc253x/dev/cc2530-rf.c:306: TXPOWER = output_power[i].txpower_val;
      00021F EA               [12] 1632 	mov	a,r2
      000220 24r00            [12] 1633 	add	a,#_output_power
      000222 F8               [12] 1634 	mov	r0,a
      000223 EB               [12] 1635 	mov	a,r3
      000224 34s00            [12] 1636 	addc	a,#(_output_power >> 8)
      000226 F9               [12] 1637 	mov	r1,a
      000227 88 82            [24] 1638 	mov	dpl,r0
      000229 89 83            [24] 1639 	mov	dph,r1
      00022B A3               [24] 1640 	inc	dptr
      00022C A3               [24] 1641 	inc	dptr
      00022D E4               [12] 1642 	clr	a
      00022E 93               [24] 1643 	movc	a,@a+dptr
      00022F F9               [12] 1644 	mov	r1,a
      000230 90 61 90         [24] 1645 	mov	dptr,#_TXPOWER
      000233 F0               [24] 1646 	movx	@dptr,a
                                   1647 ;	../../cpu/cc253x/dev/cc2530-rf.c:307: return;
      000234 80 11            [24] 1648 	sjmp	00108$
      000236                       1649 00107$:
                                   1650 ;	../../cpu/cc253x/dev/cc2530-rf.c:302: for(i = OUTPUT_CONFIG_COUNT - 2; i >= 0; --i) {
      000236 EA               [12] 1651 	mov	a,r2
      000237 24 FD            [12] 1652 	add	a,#0xFD
      000239 FA               [12] 1653 	mov	r2,a
      00023A EB               [12] 1654 	mov	a,r3
      00023B 34 FF            [12] 1655 	addc	a,#0xFF
      00023D FB               [12] 1656 	mov	r3,a
      00023E 1C               [12] 1657 	dec	r4
      00023F BC FF 01         [24] 1658 	cjne	r4,#0xFF,00121$
      000242 1D               [12] 1659 	dec	r5
      000243                       1660 00121$:
      000243 ED               [12] 1661 	mov	a,r5
      000244 30 E7 B2         [24] 1662 	jnb	acc.7,00106$
      000247                       1663 00108$:
      000247 02r00r00         [24] 1664 	ljmp	__sdcc_banked_ret
                                   1665 ;------------------------------------------------------------
                                   1666 ;Allocation info for local variables in function 'set_frame_filtering'
                                   1667 ;------------------------------------------------------------
                                   1668 ;enable                    Allocated to registers r7 
                                   1669 ;------------------------------------------------------------
                                   1670 ;	../../cpu/cc253x/dev/cc2530-rf.c:313: set_frame_filtering(uint8_t enable)
                                   1671 ;	-----------------------------------------
                                   1672 ;	 function set_frame_filtering
                                   1673 ;	-----------------------------------------
      00024A                       1674 _set_frame_filtering:
                                   1675 ;	../../cpu/cc253x/dev/cc2530-rf.c:315: if(enable) {
      00024A E5 82            [12] 1676 	mov	a,dpl
      00024C FF               [12] 1677 	mov	r7,a
      00024D 60 0A            [24] 1678 	jz	00102$
                                   1679 ;	../../cpu/cc253x/dev/cc2530-rf.c:316: FRMFILT0 |= FRMFILT0_FRAME_FILTER_EN;
      00024F 90 61 80         [24] 1680 	mov	dptr,#_FRMFILT0
      000252 E0               [24] 1681 	movx	a,@dptr
      000253 FF               [12] 1682 	mov	r7,a
      000254 44 01            [12] 1683 	orl	a,#0x01
      000256 F0               [24] 1684 	movx	@dptr,a
      000257 80 08            [24] 1685 	sjmp	00104$
      000259                       1686 00102$:
                                   1687 ;	../../cpu/cc253x/dev/cc2530-rf.c:318: FRMFILT0 &= ~FRMFILT0_FRAME_FILTER_EN;
      000259 90 61 80         [24] 1688 	mov	dptr,#_FRMFILT0
      00025C E0               [24] 1689 	movx	a,@dptr
      00025D FF               [12] 1690 	mov	r7,a
      00025E 54 FE            [12] 1691 	anl	a,#0xFE
      000260 F0               [24] 1692 	movx	@dptr,a
      000261                       1693 00104$:
      000261 02r00r00         [24] 1694 	ljmp	__sdcc_banked_ret
                                   1695 ;------------------------------------------------------------
                                   1696 ;Allocation info for local variables in function 'set_auto_ack'
                                   1697 ;------------------------------------------------------------
                                   1698 ;enable                    Allocated to registers r7 
                                   1699 ;------------------------------------------------------------
                                   1700 ;	../../cpu/cc253x/dev/cc2530-rf.c:323: set_auto_ack(uint8_t enable)
                                   1701 ;	-----------------------------------------
                                   1702 ;	 function set_auto_ack
                                   1703 ;	-----------------------------------------
      000264                       1704 _set_auto_ack:
                                   1705 ;	../../cpu/cc253x/dev/cc2530-rf.c:325: if(enable) {
      000264 E5 82            [12] 1706 	mov	a,dpl
      000266 FF               [12] 1707 	mov	r7,a
      000267 60 0A            [24] 1708 	jz	00102$
                                   1709 ;	../../cpu/cc253x/dev/cc2530-rf.c:326: FRMCTRL0 |= FRMCTRL0_AUTOACK;
      000269 90 61 89         [24] 1710 	mov	dptr,#_FRMCTRL0
      00026C E0               [24] 1711 	movx	a,@dptr
      00026D FF               [12] 1712 	mov	r7,a
      00026E 44 20            [12] 1713 	orl	a,#0x20
      000270 F0               [24] 1714 	movx	@dptr,a
      000271 80 08            [24] 1715 	sjmp	00104$
      000273                       1716 00102$:
                                   1717 ;	../../cpu/cc253x/dev/cc2530-rf.c:328: FRMCTRL0 &= ~FRMCTRL0_AUTOACK;
      000273 90 61 89         [24] 1718 	mov	dptr,#_FRMCTRL0
      000276 E0               [24] 1719 	movx	a,@dptr
      000277 FF               [12] 1720 	mov	r7,a
      000278 54 DF            [12] 1721 	anl	a,#0xDF
      00027A F0               [24] 1722 	movx	@dptr,a
      00027B                       1723 00104$:
      00027B 02r00r00         [24] 1724 	ljmp	__sdcc_banked_ret
                                   1725 ;------------------------------------------------------------
                                   1726 ;Allocation info for local variables in function 'init'
                                   1727 ;------------------------------------------------------------
                                   1728 ;	../../cpu/cc253x/dev/cc2530-rf.c:335: init(void)
                                   1729 ;	-----------------------------------------
                                   1730 ;	 function init
                                   1731 ;	-----------------------------------------
      00027E                       1732 _init:
                                   1733 ;	../../cpu/cc253x/dev/cc2530-rf.c:339: if(rf_flags & RF_ON) {
      00027E E5*00            [12] 1734 	mov	a,_rf_flags
      000280 30 E0 05         [24] 1735 	jnb	acc.0,00102$
                                   1736 ;	../../cpu/cc253x/dev/cc2530-rf.c:340: return 0;
      000283 90 00 00         [24] 1737 	mov	dptr,#0x0000
      000286 80 49            [24] 1738 	sjmp	00103$
      000288                       1739 00102$:
                                   1740 ;	../../cpu/cc253x/dev/cc2530-rf.c:348: RXCTRL = 0x3F;
      000288 90 61 AB         [24] 1741 	mov	dptr,#_RXCTRL
      00028B 74 3F            [12] 1742 	mov	a,#0x3F
      00028D F0               [24] 1743 	movx	@dptr,a
                                   1744 ;	../../cpu/cc253x/dev/cc2530-rf.c:349: FSCTRL = 0x55;
      00028E 90 61 AC         [24] 1745 	mov	dptr,#_FSCTRL
      000291 74 55            [12] 1746 	mov	a,#0x55
      000293 F0               [24] 1747 	movx	@dptr,a
                                   1748 ;	../../cpu/cc253x/dev/cc2530-rf.c:352: CCACTRL0 = CC2530_RF_CCA_THRES;
      000294 90 61 96         [24] 1749 	mov	dptr,#_CCACTRL0
      000297 74 F8            [12] 1750 	mov	a,#0xF8
      000299 F0               [24] 1751 	movx	@dptr,a
                                   1752 ;	../../cpu/cc253x/dev/cc2530-rf.c:360: TXFILTCFG = 0x09; /* TX anti-aliasing filter */
      00029A 90 61 FA         [24] 1753 	mov	dptr,#_TXFILTCFG
      00029D 74 09            [12] 1754 	mov	a,#0x09
      00029F F0               [24] 1755 	movx	@dptr,a
                                   1756 ;	../../cpu/cc253x/dev/cc2530-rf.c:361: AGCCTRL1 = 0x15;  /* AGC target value */
      0002A0 90 61 B2         [24] 1757 	mov	dptr,#_AGCCTRL1
      0002A3 74 15            [12] 1758 	mov	a,#0x15
      0002A5 F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	../../cpu/cc253x/dev/cc2530-rf.c:362: FSCAL1 = 0x00;    /* Reduce the VCO leakage */
      0002A6 90 61 AE         [24] 1761 	mov	dptr,#_FSCAL1
      0002A9 E4               [12] 1762 	clr	a
      0002AA F0               [24] 1763 	movx	@dptr,a
                                   1764 ;	../../cpu/cc253x/dev/cc2530-rf.c:365: FRMCTRL0 = FRMCTRL0_AUTOCRC;
                                   1765 ;	../../cpu/cc253x/dev/cc2530-rf.c:367: FRMCTRL0 |= FRMCTRL0_AUTOACK;
      0002AB 90 61 89         [24] 1766 	mov	dptr,#_FRMCTRL0
      0002AE 74 40            [12] 1767 	mov	a,#0x40
      0002B0 F0               [24] 1768 	movx	@dptr,a
      0002B1 E0               [24] 1769 	movx	a,@dptr
      0002B2 FF               [12] 1770 	mov	r7,a
      0002B3 90 61 89         [24] 1771 	mov	dptr,#_FRMCTRL0
      0002B6 74 20            [12] 1772 	mov	a,#0x20
      0002B8 4F               [12] 1773 	orl	a,r7
      0002B9 F0               [24] 1774 	movx	@dptr,a
                                   1775 ;	../../cpu/cc253x/dev/cc2530-rf.c:371: SRCMATCH = 0; /* investigate */
      0002BA 90 61 82         [24] 1776 	mov	dptr,#_SRCMATCH
      0002BD E4               [12] 1777 	clr	a
      0002BE F0               [24] 1778 	movx	@dptr,a
                                   1779 ;	../../cpu/cc253x/dev/cc2530-rf.c:374: FIFOPCTRL = CC2530_RF_MAX_PACKET_LEN;
      0002BF 90 61 94         [24] 1780 	mov	dptr,#_FIFOPCTRL
      0002C2 74 7F            [12] 1781 	mov	a,#0x7F
      0002C4 F0               [24] 1782 	movx	@dptr,a
                                   1783 ;	../../cpu/cc253x/dev/cc2530-rf.c:376: TXPOWER = CC2530_RF_TX_POWER;
      0002C5 90 61 90         [24] 1784 	mov	dptr,#_TXPOWER
      0002C8 74 D5            [12] 1785 	mov	a,#0xD5
      0002CA F0               [24] 1786 	movx	@dptr,a
                                   1787 ;	../../cpu/cc253x/dev/cc2530-rf.c:381: rf_flags |= RF_ON;
      0002CB 43*00 01         [24] 1788 	orl	_rf_flags,#0x01
                                   1789 ;	../../cpu/cc253x/dev/cc2530-rf.c:383: return 1;
      0002CE 90 00 01         [24] 1790 	mov	dptr,#0x0001
      0002D1                       1791 00103$:
      0002D1 02r00r00         [24] 1792 	ljmp	__sdcc_banked_ret
                                   1793 ;------------------------------------------------------------
                                   1794 ;Allocation info for local variables in function 'prepare'
                                   1795 ;------------------------------------------------------------
                                   1796 ;payload_len               Allocated to stack - sp -7
                                   1797 ;payload                   Allocated to stack - sp -2
                                   1798 ;i                         Allocated to registers r4 
                                   1799 ;------------------------------------------------------------
                                   1800 ;	../../cpu/cc253x/dev/cc2530-rf.c:387: prepare(const void *payload, unsigned short payload_len)
                                   1801 ;	-----------------------------------------
                                   1802 ;	 function prepare
                                   1803 ;	-----------------------------------------
      0002D4                       1804 _prepare:
      0002D4 C0 82            [24] 1805 	push	dpl
      0002D6 C0 83            [24] 1806 	push	dph
      0002D8 C0 F0            [24] 1807 	push	b
                                   1808 ;	../../cpu/cc253x/dev/cc2530-rf.c:399: while(FSMSTAT1 & FSMSTAT1_TX_ACTIVE);
      0002DA                       1809 00101$:
      0002DA 90 61 93         [24] 1810 	mov	dptr,#_FSMSTAT1
      0002DD E0               [24] 1811 	movx	a,@dptr
      0002DE FC               [12] 1812 	mov	r4,a
      0002DF 20 E1 F8         [24] 1813 	jb	acc.1,00101$
                                   1814 ;	../../cpu/cc253x/dev/cc2530-rf.c:401: if((rf_flags & RX_ACTIVE) == 0) {
      0002E2 E5*00            [12] 1815 	mov	a,_rf_flags
      0002E4 20 E7 09         [24] 1816 	jb	acc.7,00106$
                                   1817 ;	../../cpu/cc253x/dev/cc2530-rf.c:402: on();
      0002E7 78r7D            [12] 1818 	mov	r0,#_on
      0002E9 79s05            [12] 1819 	mov	r1,#(_on >> 8)
      0002EB 7As00            [12] 1820 	mov	r2,#(_on >> 16)
      0002ED 12r00r00         [24] 1821 	lcall	__sdcc_banked_call
                                   1822 ;	../../cpu/cc253x/dev/cc2530-rf.c:405: CC2530_CSP_ISFLUSHTX();
      0002F0                       1823 00106$:
      0002F0 75 E1 EE         [24] 1824 	mov	_RFST,#0xEE
      0002F3 75 E1 EE         [24] 1825 	mov	_RFST,#0xEE
                                   1826 ;	../../cpu/cc253x/dev/cc2530-rf.c:409: RFD = payload_len + CHECKSUM_LEN; /* Payload plus FCS */
      0002F6 E5 81            [12] 1827 	mov	a,sp
      0002F8 24 F9            [12] 1828 	add	a,#0xf9
      0002FA F8               [12] 1829 	mov	r0,a
      0002FB 86 04            [24] 1830 	mov	ar4,@r0
      0002FD 74 02            [12] 1831 	mov	a,#0x02
      0002FF 2C               [12] 1832 	add	a,r4
      000300 F5 D9            [12] 1833 	mov	_RFD,a
                                   1834 ;	../../cpu/cc253x/dev/cc2530-rf.c:410: for(i = 0; i < payload_len; i++) {
      000302 7C 00            [12] 1835 	mov	r4,#0x00
      000304                       1836 00111$:
      000304 8C 02            [24] 1837 	mov	ar2,r4
      000306 7B 00            [12] 1838 	mov	r3,#0x00
      000308 E5 81            [12] 1839 	mov	a,sp
      00030A 24 F9            [12] 1840 	add	a,#0xf9
      00030C F8               [12] 1841 	mov	r0,a
      00030D C3               [12] 1842 	clr	c
      00030E EA               [12] 1843 	mov	a,r2
      00030F 96               [12] 1844 	subb	a,@r0
      000310 EB               [12] 1845 	mov	a,r3
      000311 08               [12] 1846 	inc	r0
      000312 96               [12] 1847 	subb	a,@r0
      000313 50 20            [24] 1848 	jnc	00109$
                                   1849 ;	../../cpu/cc253x/dev/cc2530-rf.c:411: RFD = ((unsigned char *)(payload))[i];
      000315 A8 81            [24] 1850 	mov	r0,sp
      000317 18               [12] 1851 	dec	r0
      000318 18               [12] 1852 	dec	r0
      000319 86 02            [24] 1853 	mov	ar2,@r0
      00031B 08               [12] 1854 	inc	r0
      00031C 86 03            [24] 1855 	mov	ar3,@r0
      00031E 08               [12] 1856 	inc	r0
      00031F 86 07            [24] 1857 	mov	ar7,@r0
      000321 EC               [12] 1858 	mov	a,r4
      000322 2A               [12] 1859 	add	a,r2
      000323 FA               [12] 1860 	mov	r2,a
      000324 E4               [12] 1861 	clr	a
      000325 3B               [12] 1862 	addc	a,r3
      000326 FB               [12] 1863 	mov	r3,a
      000327 8A 82            [24] 1864 	mov	dpl,r2
      000329 8B 83            [24] 1865 	mov	dph,r3
      00032B 8F F0            [24] 1866 	mov	b,r7
      00032D 12r00r00         [24] 1867 	lcall	__gptrget
      000330 F5 D9            [12] 1868 	mov	_RFD,a
                                   1869 ;	../../cpu/cc253x/dev/cc2530-rf.c:410: for(i = 0; i < payload_len; i++) {
      000332 0C               [12] 1870 	inc	r4
      000333 80 CF            [24] 1871 	sjmp	00111$
      000335                       1872 00109$:
                                   1873 ;	../../cpu/cc253x/dev/cc2530-rf.c:417: RFD = 0;
      000335 75 D9 00         [24] 1874 	mov	_RFD,#0x00
                                   1875 ;	../../cpu/cc253x/dev/cc2530-rf.c:418: RFD = 0;
      000338 75 D9 00         [24] 1876 	mov	_RFD,#0x00
                                   1877 ;	../../cpu/cc253x/dev/cc2530-rf.c:420: return 0;
      00033B 90 00 00         [24] 1878 	mov	dptr,#0x0000
      00033E 15 81            [12] 1879 	dec	sp
      000340 15 81            [12] 1880 	dec	sp
      000342 15 81            [12] 1881 	dec	sp
      000344 02r00r00         [24] 1882 	ljmp	__sdcc_banked_ret
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'transmit'
                                   1885 ;------------------------------------------------------------
                                   1886 ;transmit_len              Allocated to registers 
                                   1887 ;counter                   Allocated to registers r7 
                                   1888 ;ret                       Allocated to registers r6 r7 
                                   1889 ;t0                        Allocated to registers 
                                   1890 ;------------------------------------------------------------
                                   1891 ;	../../cpu/cc253x/dev/cc2530-rf.c:424: transmit(unsigned short transmit_len)
                                   1892 ;	-----------------------------------------
                                   1893 ;	 function transmit
                                   1894 ;	-----------------------------------------
      000347                       1895 _transmit:
                                   1896 ;	../../cpu/cc253x/dev/cc2530-rf.c:431: if(!(rf_flags & RX_ACTIVE)) {
      000347 E5*00            [12] 1897 	mov	a,_rf_flags
      000349 20 E7 42         [24] 1898 	jb	acc.7,00105$
                                   1899 ;	../../cpu/cc253x/dev/cc2530-rf.c:432: t0 = RTIMER_NOW();
      00034C AE E2            [24] 1900 	mov	r6,_T1CNTL
      00034E 7F 00            [12] 1901 	mov	r7,#0x00
      000350 AC E3            [24] 1902 	mov	r4,_T1CNTH
      000352 8C 05            [24] 1903 	mov	ar5,r4
      000354 E4               [12] 1904 	clr	a
      000355 2E               [12] 1905 	add	a,r6
      000356 FE               [12] 1906 	mov	r6,a
      000357 ED               [12] 1907 	mov	a,r5
      000358 3F               [12] 1908 	addc	a,r7
      000359 FF               [12] 1909 	mov	r7,a
                                   1910 ;	../../cpu/cc253x/dev/cc2530-rf.c:433: on();
      00035A C0 07            [24] 1911 	push	ar7
      00035C C0 06            [24] 1912 	push	ar6
      00035E 78r7D            [12] 1913 	mov	r0,#_on
      000360 79s05            [12] 1914 	mov	r1,#(_on >> 8)
      000362 7As00            [12] 1915 	mov	r2,#(_on >> 16)
      000364 12r00r00         [24] 1916 	lcall	__sdcc_banked_call
      000367 D0 06            [24] 1917 	pop	ar6
      000369 D0 07            [24] 1918 	pop	ar7
                                   1919 ;	../../cpu/cc253x/dev/cc2530-rf.c:434: rf_flags |= WAS_OFF;
      00036B 43*00 10         [24] 1920 	orl	_rf_flags,#0x10
                                   1921 ;	../../cpu/cc253x/dev/cc2530-rf.c:435: while(RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + ONOFF_TIME));
      00036E 74 05            [12] 1922 	mov	a,#0x05
      000370 2E               [12] 1923 	add	a,r6
      000371 FE               [12] 1924 	mov	r6,a
      000372 E4               [12] 1925 	clr	a
      000373 3F               [12] 1926 	addc	a,r7
      000374 FF               [12] 1927 	mov	r7,a
      000375                       1928 00101$:
      000375 AC E2            [24] 1929 	mov	r4,_T1CNTL
      000377 7D 00            [12] 1930 	mov	r5,#0x00
      000379 AA E3            [24] 1931 	mov	r2,_T1CNTH
      00037B 8A 03            [24] 1932 	mov	ar3,r2
      00037D E4               [12] 1933 	clr	a
      00037E FA               [12] 1934 	mov	r2,a
      00037F 2C               [12] 1935 	add	a,r4
      000380 FC               [12] 1936 	mov	r4,a
      000381 EB               [12] 1937 	mov	a,r3
      000382 3D               [12] 1938 	addc	a,r5
      000383 FD               [12] 1939 	mov	r5,a
      000384 EC               [12] 1940 	mov	a,r4
      000385 C3               [12] 1941 	clr	c
      000386 9E               [12] 1942 	subb	a,r6
      000387 FC               [12] 1943 	mov	r4,a
      000388 ED               [12] 1944 	mov	a,r5
      000389 9F               [12] 1945 	subb	a,r7
      00038A FD               [12] 1946 	mov	r5,a
      00038B 20 E7 E7         [24] 1947 	jb	acc.7,00101$
      00038E                       1948 00105$:
                                   1949 ;	../../cpu/cc253x/dev/cc2530-rf.c:438: if(channel_clear() == CC2530_RF_CCA_BUSY) {
      00038E 78r4F            [12] 1950 	mov	r0,#_channel_clear
      000390 79s05            [12] 1951 	mov	r1,#(_channel_clear >> 8)
      000392 7As00            [12] 1952 	mov	r2,#(_channel_clear >> 16)
      000394 12r00r00         [24] 1953 	lcall	__sdcc_banked_call
      000397 E5 82            [12] 1954 	mov	a,dpl
      000399 85 83 F0         [24] 1955 	mov	b,dph
      00039C 45 F0            [12] 1956 	orl	a,b
      00039E 70 05            [24] 1957 	jnz	00107$
                                   1958 ;	../../cpu/cc253x/dev/cc2530-rf.c:440: return RADIO_TX_COLLISION;
      0003A0 90 00 02         [24] 1959 	mov	dptr,#0x0002
      0003A3 80 6E            [24] 1960 	sjmp	00136$
      0003A5                       1961 00107$:
                                   1962 ;	../../cpu/cc253x/dev/cc2530-rf.c:447: if(FSMSTAT1 & FSMSTAT1_SFD) {
      0003A5 90 61 93         [24] 1963 	mov	dptr,#_FSMSTAT1
      0003A8 E0               [24] 1964 	movx	a,@dptr
      0003A9 FF               [12] 1965 	mov	r7,a
      0003AA 30 E5 05         [24] 1966 	jnb	acc.5,00110$
                                   1967 ;	../../cpu/cc253x/dev/cc2530-rf.c:449: return RADIO_TX_COLLISION;
      0003AD 90 00 02         [24] 1968 	mov	dptr,#0x0002
                                   1969 ;	../../cpu/cc253x/dev/cc2530-rf.c:454: ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
      0003B0 80 61            [24] 1970 	sjmp	00136$
      0003B2                       1971 00110$:
                                   1972 ;	../../cpu/cc253x/dev/cc2530-rf.c:457: CC2530_CSP_ISTXON();
      0003B2 75 E1 E9         [24] 1973 	mov	_RFST,#0xE9
                                   1974 ;	../../cpu/cc253x/dev/cc2530-rf.c:460: while(!(FSMSTAT1 & FSMSTAT1_TX_ACTIVE) && (counter++ < 3)) {
      0003B5 7F 00            [12] 1975 	mov	r7,#0x00
      0003B7                       1976 00118$:
      0003B7 90 61 93         [24] 1977 	mov	dptr,#_FSMSTAT1
      0003BA E0               [24] 1978 	movx	a,@dptr
      0003BB FE               [12] 1979 	mov	r6,a
      0003BC 20 E1 1A         [24] 1980 	jb	acc.1,00120$
      0003BF 8F 06            [24] 1981 	mov	ar6,r7
      0003C1 0F               [12] 1982 	inc	r7
      0003C2 BE 03 00         [24] 1983 	cjne	r6,#0x03,00177$
      0003C5                       1984 00177$:
      0003C5 50 12            [24] 1985 	jnc	00120$
                                   1986 ;	../../cpu/cc253x/dev/cc2530-rf.c:461: clock_delay_usec(6);
      0003C7 90 00 06         [24] 1987 	mov	dptr,#0x0006
      0003CA C0 07            [24] 1988 	push	ar7
      0003CC 78r00            [12] 1989 	mov	r0,#_clock_delay_usec
      0003CE 79s00            [12] 1990 	mov	r1,#(_clock_delay_usec >> 8)
      0003D0 7As00            [12] 1991 	mov	r2,#(_clock_delay_usec >> 16)
      0003D2 12r00r00         [24] 1992 	lcall	__sdcc_banked_call
      0003D5 D0 07            [24] 1993 	pop	ar7
      0003D7 80 DE            [24] 1994 	sjmp	00118$
      0003D9                       1995 00120$:
                                   1996 ;	../../cpu/cc253x/dev/cc2530-rf.c:464: if(!(FSMSTAT1 & FSMSTAT1_TX_ACTIVE)) {
      0003D9 90 61 93         [24] 1997 	mov	dptr,#_FSMSTAT1
      0003DC E0               [24] 1998 	movx	a,@dptr
      0003DD FF               [12] 1999 	mov	r7,a
      0003DE 20 E1 0C         [24] 2000 	jb	acc.1,00124$
                                   2001 ;	../../cpu/cc253x/dev/cc2530-rf.c:466: CC2530_CSP_ISFLUSHTX();
      0003E1 75 E1 EE         [24] 2002 	mov	_RFST,#0xEE
      0003E4 75 E1 EE         [24] 2003 	mov	_RFST,#0xEE
                                   2004 ;	../../cpu/cc253x/dev/cc2530-rf.c:467: ret = RADIO_TX_ERR;
      0003E7 7E 01            [12] 2005 	mov	r6,#0x01
      0003E9 7F 00            [12] 2006 	mov	r7,#0x00
                                   2007 ;	../../cpu/cc253x/dev/cc2530-rf.c:470: while(FSMSTAT1 & FSMSTAT1_TX_ACTIVE);
      0003EB 80 0C            [24] 2008 	sjmp	00130$
      0003ED                       2009 00124$:
      0003ED 90 61 93         [24] 2010 	mov	dptr,#_FSMSTAT1
      0003F0 E0               [24] 2011 	movx	a,@dptr
      0003F1 FD               [12] 2012 	mov	r5,a
      0003F2 20 E1 F8         [24] 2013 	jb	acc.1,00124$
                                   2014 ;	../../cpu/cc253x/dev/cc2530-rf.c:471: ret = RADIO_TX_OK;
      0003F5 7E 00            [12] 2015 	mov	r6,#0x00
      0003F7 7F 00            [12] 2016 	mov	r7,#0x00
                                   2017 ;	../../cpu/cc253x/dev/cc2530-rf.c:473: ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
      0003F9                       2018 00130$:
                                   2019 ;	../../cpu/cc253x/dev/cc2530-rf.c:476: if(rf_flags & WAS_OFF) {
      0003F9 E5*00            [12] 2020 	mov	a,_rf_flags
      0003FB 30 E4 11         [24] 2021 	jnb	acc.4,00135$
                                   2022 ;	../../cpu/cc253x/dev/cc2530-rf.c:477: off();
      0003FE C0 07            [24] 2023 	push	ar7
      000400 C0 06            [24] 2024 	push	ar6
      000402 78r94            [12] 2025 	mov	r0,#_off
      000404 79s05            [12] 2026 	mov	r1,#(_off >> 8)
      000406 7As00            [12] 2027 	mov	r2,#(_off >> 16)
      000408 12r00r00         [24] 2028 	lcall	__sdcc_banked_call
      00040B D0 06            [24] 2029 	pop	ar6
      00040D D0 07            [24] 2030 	pop	ar7
      00040F                       2031 00135$:
                                   2032 ;	../../cpu/cc253x/dev/cc2530-rf.c:485: return ret;
      00040F 8E 82            [24] 2033 	mov	dpl,r6
      000411 8F 83            [24] 2034 	mov	dph,r7
      000413                       2035 00136$:
      000413 02r00r00         [24] 2036 	ljmp	__sdcc_banked_ret
                                   2037 ;------------------------------------------------------------
                                   2038 ;Allocation info for local variables in function 'send'
                                   2039 ;------------------------------------------------------------
                                   2040 ;payload_len               Allocated to stack - sp -4
                                   2041 ;payload                   Allocated to registers r5 r6 r7 
                                   2042 ;------------------------------------------------------------
                                   2043 ;	../../cpu/cc253x/dev/cc2530-rf.c:489: send(const void *payload, unsigned short payload_len)
                                   2044 ;	-----------------------------------------
                                   2045 ;	 function send
                                   2046 ;	-----------------------------------------
      000416                       2047 _send:
      000416 AD 82            [24] 2048 	mov	r5,dpl
      000418 AE 83            [24] 2049 	mov	r6,dph
      00041A AF F0            [24] 2050 	mov	r7,b
                                   2051 ;	../../cpu/cc253x/dev/cc2530-rf.c:491: prepare(payload, payload_len);
      00041C E5 81            [12] 2052 	mov	a,sp
      00041E 24 FC            [12] 2053 	add	a,#0xfc
      000420 F8               [12] 2054 	mov	r0,a
      000421 E6               [12] 2055 	mov	a,@r0
      000422 C0 E0            [24] 2056 	push	acc
      000424 08               [12] 2057 	inc	r0
      000425 E6               [12] 2058 	mov	a,@r0
      000426 C0 E0            [24] 2059 	push	acc
      000428 8D 82            [24] 2060 	mov	dpl,r5
      00042A 8E 83            [24] 2061 	mov	dph,r6
      00042C 8F F0            [24] 2062 	mov	b,r7
      00042E 78rD4            [12] 2063 	mov	r0,#_prepare
      000430 79s02            [12] 2064 	mov	r1,#(_prepare >> 8)
      000432 7As00            [12] 2065 	mov	r2,#(_prepare >> 16)
      000434 12r00r00         [24] 2066 	lcall	__sdcc_banked_call
      000437 15 81            [12] 2067 	dec	sp
      000439 15 81            [12] 2068 	dec	sp
                                   2069 ;	../../cpu/cc253x/dev/cc2530-rf.c:492: return transmit(payload_len);
      00043B E5 81            [12] 2070 	mov	a,sp
      00043D 24 FC            [12] 2071 	add	a,#0xfc
      00043F F8               [12] 2072 	mov	r0,a
      000440 86 82            [24] 2073 	mov	dpl,@r0
      000442 08               [12] 2074 	inc	r0
      000443 86 83            [24] 2075 	mov	dph,@r0
      000445 78r47            [12] 2076 	mov	r0,#_transmit
      000447 79s03            [12] 2077 	mov	r1,#(_transmit >> 8)
      000449 7As00            [12] 2078 	mov	r2,#(_transmit >> 16)
      00044B 12r00r00         [24] 2079 	lcall	__sdcc_banked_call
      00044E AE 82            [24] 2080 	mov	r6,dpl
      000450 AF 83            [24] 2081 	mov  r7,dph
      000452 02r00r00         [24] 2082 	ljmp	__sdcc_banked_ret
                                   2083 ;------------------------------------------------------------
                                   2084 ;Allocation info for local variables in function 'read'
                                   2085 ;------------------------------------------------------------
                                   2086 ;bufsize                   Allocated to stack - sp -7
                                   2087 ;buf                       Allocated to stack - sp -2
                                   2088 ;i                         Allocated to registers r3 
                                   2089 ;len                       Allocated to registers r4 
                                   2090 ;crc_corr                  Allocated to registers r6 
                                   2091 ;rssi                      Allocated to registers r7 
                                   2092 ;------------------------------------------------------------
                                   2093 ;	../../cpu/cc253x/dev/cc2530-rf.c:496: read(void *buf, unsigned short bufsize)
                                   2094 ;	-----------------------------------------
                                   2095 ;	 function read
                                   2096 ;	-----------------------------------------
      000455                       2097 _read:
      000455 C0 82            [24] 2098 	push	dpl
      000457 C0 83            [24] 2099 	push	dph
      000459 C0 F0            [24] 2100 	push	b
                                   2101 ;	../../cpu/cc253x/dev/cc2530-rf.c:506: len = RFD;
                                   2102 ;	../../cpu/cc253x/dev/cc2530-rf.c:509: if(len > CC2530_RF_MAX_PACKET_LEN) {
      00045B E5 D9            [12] 2103 	mov	a,_RFD
      00045D FC               [12] 2104 	mov	r4,a
      00045E 24 80            [12] 2105 	add	a,#0xff - 0x7F
      000460 50 0C            [24] 2106 	jnc	00105$
                                   2107 ;	../../cpu/cc253x/dev/cc2530-rf.c:514: CC2530_CSP_ISFLUSHRX();
      000462 75 E1 ED         [24] 2108 	mov	_RFST,#0xED
      000465 75 E1 ED         [24] 2109 	mov	_RFST,#0xED
                                   2110 ;	../../cpu/cc253x/dev/cc2530-rf.c:515: return 0;
      000468 90 00 00         [24] 2111 	mov	dptr,#0x0000
      00046B 02r05r46         [24] 2112 	ljmp	00133$
      00046E                       2113 00105$:
                                   2114 ;	../../cpu/cc253x/dev/cc2530-rf.c:518: if(len <= CC2530_RF_MIN_PACKET_LEN) {
      00046E EC               [12] 2115 	mov	a,r4
      00046F 24 FB            [12] 2116 	add	a,#0xff - 0x04
      000471 40 0C            [24] 2117 	jc	00110$
                                   2118 ;	../../cpu/cc253x/dev/cc2530-rf.c:522: CC2530_CSP_ISFLUSHRX();
      000473 75 E1 ED         [24] 2119 	mov	_RFST,#0xED
      000476 75 E1 ED         [24] 2120 	mov	_RFST,#0xED
                                   2121 ;	../../cpu/cc253x/dev/cc2530-rf.c:523: return 0;
      000479 90 00 00         [24] 2122 	mov	dptr,#0x0000
      00047C 02r05r46         [24] 2123 	ljmp	00133$
      00047F                       2124 00110$:
                                   2125 ;	../../cpu/cc253x/dev/cc2530-rf.c:526: if(len - CHECKSUM_LEN > bufsize) {
      00047F 8C 02            [24] 2126 	mov	ar2,r4
      000481 7B 00            [12] 2127 	mov	r3,#0x00
      000483 EA               [12] 2128 	mov	a,r2
      000484 24 FE            [12] 2129 	add	a,#0xFE
      000486 FA               [12] 2130 	mov	r2,a
      000487 EB               [12] 2131 	mov	a,r3
      000488 34 FF            [12] 2132 	addc	a,#0xFF
      00048A FB               [12] 2133 	mov	r3,a
      00048B E5 81            [12] 2134 	mov	a,sp
      00048D 24 F9            [12] 2135 	add	a,#0xf9
      00048F F8               [12] 2136 	mov	r0,a
      000490 C3               [12] 2137 	clr	c
      000491 E6               [12] 2138 	mov	a,@r0
      000492 9A               [12] 2139 	subb	a,r2
      000493 08               [12] 2140 	inc	r0
      000494 E6               [12] 2141 	mov	a,@r0
      000495 9B               [12] 2142 	subb	a,r3
      000496 50 0C            [24] 2143 	jnc	00115$
                                   2144 ;	../../cpu/cc253x/dev/cc2530-rf.c:530: CC2530_CSP_ISFLUSHRX();
      000498 75 E1 ED         [24] 2145 	mov	_RFST,#0xED
      00049B 75 E1 ED         [24] 2146 	mov	_RFST,#0xED
                                   2147 ;	../../cpu/cc253x/dev/cc2530-rf.c:531: return 0;
      00049E 90 00 00         [24] 2148 	mov	dptr,#0x0000
      0004A1 02r05r46         [24] 2149 	ljmp	00133$
      0004A4                       2150 00115$:
                                   2151 ;	../../cpu/cc253x/dev/cc2530-rf.c:548: len -= CHECKSUM_LEN;
      0004A4 1C               [12] 2152 	dec	r4
      0004A5 1C               [12] 2153 	dec	r4
                                   2154 ;	../../cpu/cc253x/dev/cc2530-rf.c:549: for(i = 0; i < len; ++i) {
      0004A6 7B 00            [12] 2155 	mov	r3,#0x00
      0004A8                       2156 00131$:
      0004A8 C3               [12] 2157 	clr	c
      0004A9 EB               [12] 2158 	mov	a,r3
      0004AA 9C               [12] 2159 	subb	a,r4
      0004AB 50 25            [24] 2160 	jnc	00116$
                                   2161 ;	../../cpu/cc253x/dev/cc2530-rf.c:550: ((unsigned char *)(buf))[i] = RFD;
      0004AD C0 04            [24] 2162 	push	ar4
      0004AF E5 81            [12] 2163 	mov	a,sp
      0004B1 24 FD            [12] 2164 	add	a,#0xfd
      0004B3 F8               [12] 2165 	mov	r0,a
      0004B4 86 02            [24] 2166 	mov	ar2,@r0
      0004B6 08               [12] 2167 	inc	r0
      0004B7 86 04            [24] 2168 	mov	ar4,@r0
      0004B9 08               [12] 2169 	inc	r0
      0004BA 86 07            [24] 2170 	mov	ar7,@r0
      0004BC EB               [12] 2171 	mov	a,r3
      0004BD 2A               [12] 2172 	add	a,r2
      0004BE FA               [12] 2173 	mov	r2,a
      0004BF E4               [12] 2174 	clr	a
      0004C0 3C               [12] 2175 	addc	a,r4
      0004C1 FC               [12] 2176 	mov	r4,a
      0004C2 8A 82            [24] 2177 	mov	dpl,r2
      0004C4 8C 83            [24] 2178 	mov	dph,r4
      0004C6 8F F0            [24] 2179 	mov	b,r7
      0004C8 E5 D9            [12] 2180 	mov	a,_RFD
      0004CA 12r00r00         [24] 2181 	lcall	__gptrput
                                   2182 ;	../../cpu/cc253x/dev/cc2530-rf.c:549: for(i = 0; i < len; ++i) {
      0004CD 0B               [12] 2183 	inc	r3
      0004CE D0 04            [24] 2184 	pop	ar4
      0004D0 80 D6            [24] 2185 	sjmp	00131$
      0004D2                       2186 00116$:
                                   2187 ;	../../cpu/cc253x/dev/cc2530-rf.c:559: rssi = ((int8_t) RFD) - RSSI_OFFSET;
      0004D2 E5 D9            [12] 2188 	mov	a,_RFD
      0004D4 24 B7            [12] 2189 	add	a,#0xB7
      0004D6 FF               [12] 2190 	mov	r7,a
                                   2191 ;	../../cpu/cc253x/dev/cc2530-rf.c:560: crc_corr = RFD;
                                   2192 ;	../../cpu/cc253x/dev/cc2530-rf.c:569: if(crc_corr & CRC_BIT_MASK) {
      0004D7 E5 D9            [12] 2193 	mov	a,_RFD
      0004D9 FE               [12] 2194 	mov	r6,a
      0004DA 30 E7 40         [24] 2195 	jnb	acc.7,00117$
                                   2196 ;	../../cpu/cc253x/dev/cc2530-rf.c:570: packetbuf_set_attr(PACKETBUF_ATTR_RSSI, rssi);
      0004DD EF               [12] 2197 	mov	a,r7
      0004DE 33               [12] 2198 	rlc	a
      0004DF 95 E0            [12] 2199 	subb	a,acc
      0004E1 FD               [12] 2200 	mov	r5,a
      0004E2 C0 06            [24] 2201 	push	ar6
      0004E4 C0 04            [24] 2202 	push	ar4
      0004E6 C0 07            [24] 2203 	push	ar7
      0004E8 C0 05            [24] 2204 	push	ar5
      0004EA 75 82 04         [24] 2205 	mov	dpl,#0x04
      0004ED 78r00            [12] 2206 	mov	r0,#_packetbuf_set_attr
      0004EF 79s00            [12] 2207 	mov	r1,#(_packetbuf_set_attr >> 8)
      0004F1 7As00            [12] 2208 	mov	r2,#(_packetbuf_set_attr >> 16)
      0004F3 12r00r00         [24] 2209 	lcall	__sdcc_banked_call
      0004F6 15 81            [12] 2210 	dec	sp
      0004F8 15 81            [12] 2211 	dec	sp
      0004FA D0 04            [24] 2212 	pop	ar4
      0004FC D0 06            [24] 2213 	pop	ar6
                                   2214 ;	../../cpu/cc253x/dev/cc2530-rf.c:571: packetbuf_set_attr(PACKETBUF_ATTR_LINK_QUALITY, crc_corr & LQI_BIT_MASK);
      0004FE 53 06 7F         [24] 2215 	anl	ar6,#0x7F
      000501 7F 00            [12] 2216 	mov	r7,#0x00
      000503 C0 04            [24] 2217 	push	ar4
      000505 C0 06            [24] 2218 	push	ar6
      000507 C0 07            [24] 2219 	push	ar7
      000509 75 82 03         [24] 2220 	mov	dpl,#0x03
      00050C 78r00            [12] 2221 	mov	r0,#_packetbuf_set_attr
      00050E 79s00            [12] 2222 	mov	r1,#(_packetbuf_set_attr >> 8)
      000510 7As00            [12] 2223 	mov	r2,#(_packetbuf_set_attr >> 16)
      000512 12r00r00         [24] 2224 	lcall	__sdcc_banked_call
      000515 15 81            [12] 2225 	dec	sp
      000517 15 81            [12] 2226 	dec	sp
      000519 D0 04            [24] 2227 	pop	ar4
                                   2228 ;	../../cpu/cc253x/dev/cc2530-rf.c:575: CC2530_CSP_ISFLUSHRX();
      00051B 80 0B            [24] 2229 	sjmp	00122$
      00051D                       2230 00117$:
      00051D 75 E1 ED         [24] 2231 	mov	_RFST,#0xED
      000520 75 E1 ED         [24] 2232 	mov	_RFST,#0xED
                                   2233 ;	../../cpu/cc253x/dev/cc2530-rf.c:577: return 0;
      000523 90 00 00         [24] 2234 	mov	dptr,#0x0000
      000526 80 1E            [24] 2235 	sjmp	00133$
      000528                       2236 00122$:
                                   2237 ;	../../cpu/cc253x/dev/cc2530-rf.c:581: if((FSMSTAT1 & (FSMSTAT1_FIFO | FSMSTAT1_FIFOP)) == FSMSTAT1_FIFOP) {
      000528 90 61 93         [24] 2238 	mov	dptr,#_FSMSTAT1
      00052B E0               [24] 2239 	movx	a,@dptr
      00052C FF               [12] 2240 	mov	r7,a
      00052D 53 07 C0         [24] 2241 	anl	ar7,#0xC0
      000530 BF 40 0D         [24] 2242 	cjne	r7,#0x40,00129$
                                   2243 ;	../../cpu/cc253x/dev/cc2530-rf.c:589: if(!RXFIFOCNT) {
      000533 90 61 9B         [24] 2244 	mov	dptr,#_RXFIFOCNT
      000536 E0               [24] 2245 	movx	a,@dptr
      000537 FF               [12] 2246 	mov	r7,a
      000538 70 06            [24] 2247 	jnz	00129$
                                   2248 ;	../../cpu/cc253x/dev/cc2530-rf.c:590: CC2530_CSP_ISFLUSHRX();
      00053A 75 E1 ED         [24] 2249 	mov	_RFST,#0xED
      00053D 75 E1 ED         [24] 2250 	mov	_RFST,#0xED
      000540                       2251 00129$:
                                   2252 ;	../../cpu/cc253x/dev/cc2530-rf.c:596: return (len);
      000540 7F 00            [12] 2253 	mov	r7,#0x00
      000542 8C 82            [24] 2254 	mov	dpl,r4
      000544 8F 83            [24] 2255 	mov	dph,r7
      000546                       2256 00133$:
      000546 15 81            [12] 2257 	dec	sp
      000548 15 81            [12] 2258 	dec	sp
      00054A 15 81            [12] 2259 	dec	sp
      00054C 02r00r00         [24] 2260 	ljmp	__sdcc_banked_ret
                                   2261 ;------------------------------------------------------------
                                   2262 ;Allocation info for local variables in function 'channel_clear'
                                   2263 ;------------------------------------------------------------
                                   2264 ;	../../cpu/cc253x/dev/cc2530-rf.c:600: channel_clear(void)
                                   2265 ;	-----------------------------------------
                                   2266 ;	 function channel_clear
                                   2267 ;	-----------------------------------------
      00054F                       2268 _channel_clear:
                                   2269 ;	../../cpu/cc253x/dev/cc2530-rf.c:602: if(FSMSTAT1 & FSMSTAT1_CCA) {
      00054F 90 61 93         [24] 2270 	mov	dptr,#_FSMSTAT1
      000552 E0               [24] 2271 	movx	a,@dptr
      000553 FF               [12] 2272 	mov	r7,a
      000554 30 E4 05         [24] 2273 	jnb	acc.4,00102$
                                   2274 ;	../../cpu/cc253x/dev/cc2530-rf.c:603: return CC2530_RF_CCA_CLEAR;
      000557 90 00 01         [24] 2275 	mov	dptr,#0x0001
      00055A 80 03            [24] 2276 	sjmp	00103$
      00055C                       2277 00102$:
                                   2278 ;	../../cpu/cc253x/dev/cc2530-rf.c:605: return CC2530_RF_CCA_BUSY;
      00055C 90 00 00         [24] 2279 	mov	dptr,#0x0000
      00055F                       2280 00103$:
      00055F 02r00r00         [24] 2281 	ljmp	__sdcc_banked_ret
                                   2282 ;------------------------------------------------------------
                                   2283 ;Allocation info for local variables in function 'receiving_packet'
                                   2284 ;------------------------------------------------------------
                                   2285 ;	../../cpu/cc253x/dev/cc2530-rf.c:609: receiving_packet(void)
                                   2286 ;	-----------------------------------------
                                   2287 ;	 function receiving_packet
                                   2288 ;	-----------------------------------------
      000562                       2289 _receiving_packet:
                                   2290 ;	../../cpu/cc253x/dev/cc2530-rf.c:619: return (FSMSTAT1 & (FSMSTAT1_TX_ACTIVE | FSMSTAT1_SFD) == FSMSTAT1_SFD);
      000562 90 61 93         [24] 2291 	mov	dptr,#_FSMSTAT1
      000565 E0               [24] 2292 	movx	a,@dptr
      000566 90 00 00         [24] 2293 	mov	dptr,#0x0000
      000569 02r00r00         [24] 2294 	ljmp	__sdcc_banked_ret
                                   2295 ;------------------------------------------------------------
                                   2296 ;Allocation info for local variables in function 'pending_packet'
                                   2297 ;------------------------------------------------------------
                                   2298 ;	../../cpu/cc253x/dev/cc2530-rf.c:623: pending_packet(void)
                                   2299 ;	-----------------------------------------
                                   2300 ;	 function pending_packet
                                   2301 ;	-----------------------------------------
      00056C                       2302 _pending_packet:
                                   2303 ;	../../cpu/cc253x/dev/cc2530-rf.c:625: return (FSMSTAT1 & FSMSTAT1_FIFOP);
      00056C 90 61 93         [24] 2304 	mov	dptr,#_FSMSTAT1
      00056F E0               [24] 2305 	movx	a,@dptr
      000570 FF               [12] 2306 	mov	r7,a
      000571 53 07 40         [24] 2307 	anl	ar7,#0x40
      000574 7E 00            [12] 2308 	mov	r6,#0x00
      000576 8F 82            [24] 2309 	mov	dpl,r7
      000578 8E 83            [24] 2310 	mov	dph,r6
      00057A 02r00r00         [24] 2311 	ljmp	__sdcc_banked_ret
                                   2312 ;------------------------------------------------------------
                                   2313 ;Allocation info for local variables in function 'on'
                                   2314 ;------------------------------------------------------------
                                   2315 ;	../../cpu/cc253x/dev/cc2530-rf.c:629: on(void)
                                   2316 ;	-----------------------------------------
                                   2317 ;	 function on
                                   2318 ;	-----------------------------------------
      00057D                       2319 _on:
                                   2320 ;	../../cpu/cc253x/dev/cc2530-rf.c:631: if(!(rf_flags & RX_ACTIVE)) {
      00057D E5*00            [12] 2321 	mov	a,_rf_flags
      00057F 20 E7 0C         [24] 2322 	jb	acc.7,00109$
                                   2323 ;	../../cpu/cc253x/dev/cc2530-rf.c:632: CC2530_CSP_ISFLUSHRX();
      000582 75 E1 ED         [24] 2324 	mov	_RFST,#0xED
      000585 75 E1 ED         [24] 2325 	mov	_RFST,#0xED
                                   2326 ;	../../cpu/cc253x/dev/cc2530-rf.c:633: CC2530_CSP_ISRXON();
      000588 75 E1 E3         [24] 2327 	mov	_RFST,#0xE3
                                   2328 ;	../../cpu/cc253x/dev/cc2530-rf.c:635: rf_flags |= RX_ACTIVE;
      00058B 43*00 80         [24] 2329 	orl	_rf_flags,#0x80
                                   2330 ;	../../cpu/cc253x/dev/cc2530-rf.c:638: ENERGEST_ON(ENERGEST_TYPE_LISTEN);
      00058E                       2331 00109$:
                                   2332 ;	../../cpu/cc253x/dev/cc2530-rf.c:639: return 1;
      00058E 90 00 01         [24] 2333 	mov	dptr,#0x0001
      000591 02r00r00         [24] 2334 	ljmp	__sdcc_banked_ret
                                   2335 ;------------------------------------------------------------
                                   2336 ;Allocation info for local variables in function 'off'
                                   2337 ;------------------------------------------------------------
                                   2338 ;	../../cpu/cc253x/dev/cc2530-rf.c:643: off(void)
                                   2339 ;	-----------------------------------------
                                   2340 ;	 function off
                                   2341 ;	-----------------------------------------
      000594                       2342 _off:
                                   2343 ;	../../cpu/cc253x/dev/cc2530-rf.c:645: CC2530_CSP_ISRFOFF();
      000594 75 E1 EF         [24] 2344 	mov	_RFST,#0xEF
                                   2345 ;	../../cpu/cc253x/dev/cc2530-rf.c:646: CC2530_CSP_ISFLUSHRX();
      000597 75 E1 ED         [24] 2346 	mov	_RFST,#0xED
      00059A 75 E1 ED         [24] 2347 	mov	_RFST,#0xED
                                   2348 ;	../../cpu/cc253x/dev/cc2530-rf.c:648: rf_flags &= ~RX_ACTIVE;
      00059D AF*00            [24] 2349 	mov	r7,_rf_flags
      00059F 74 7F            [12] 2350 	mov	a,#0x7F
      0005A1 5F               [12] 2351 	anl	a,r7
      0005A2 F5*00            [12] 2352 	mov	_rf_flags,a
                                   2353 ;	../../cpu/cc253x/dev/cc2530-rf.c:651: return 1;
      0005A4 90 00 01         [24] 2354 	mov	dptr,#0x0001
      0005A7 02r00r00         [24] 2355 	ljmp	__sdcc_banked_ret
                                   2356 ;------------------------------------------------------------
                                   2357 ;Allocation info for local variables in function 'get_value'
                                   2358 ;------------------------------------------------------------
                                   2359 ;value                     Allocated to stack - sp -5
                                   2360 ;param                     Allocated to registers r6 r7 
                                   2361 ;------------------------------------------------------------
                                   2362 ;	../../cpu/cc253x/dev/cc2530-rf.c:655: get_value(radio_param_t param, radio_value_t *value)
                                   2363 ;	-----------------------------------------
                                   2364 ;	 function get_value
                                   2365 ;	-----------------------------------------
      0005AA                       2366 _get_value:
      0005AA AE 82            [24] 2367 	mov	r6,dpl
      0005AC AF 83            [24] 2368 	mov	r7,dph
                                   2369 ;	../../cpu/cc253x/dev/cc2530-rf.c:657: if(!value) {
      0005AE E5 81            [12] 2370 	mov	a,sp
      0005B0 24 FB            [12] 2371 	add	a,#0xfb
      0005B2 F8               [12] 2372 	mov	r0,a
      0005B3 E6               [12] 2373 	mov	a,@r0
      0005B4 08               [12] 2374 	inc	r0
      0005B5 46               [12] 2375 	orl	a,@r0
      0005B6 70 06            [24] 2376 	jnz	00102$
                                   2377 ;	../../cpu/cc253x/dev/cc2530-rf.c:658: return RADIO_RESULT_INVALID_VALUE;
      0005B8 75 82 02         [24] 2378 	mov	dpl,#0x02
      0005BB 02r08rA1         [24] 2379 	ljmp	00121$
      0005BE                       2380 00102$:
                                   2381 ;	../../cpu/cc253x/dev/cc2530-rf.c:661: switch(param) {
      0005BE C3               [12] 2382 	clr	c
      0005BF 74 0D            [12] 2383 	mov	a,#0x0D
      0005C1 9E               [12] 2384 	subb	a,r6
      0005C2 E4               [12] 2385 	clr	a
      0005C3 9F               [12] 2386 	subb	a,r7
      0005C4 50 03            [24] 2387 	jnc	00141$
      0005C6 02r08r9E         [24] 2388 	ljmp	00119$
      0005C9                       2389 00141$:
      0005C9 EE               [12] 2390 	mov	a,r6
      0005CA 24 0A            [12] 2391 	add	a,#(00142$-3-.)
      0005CC 83               [24] 2392 	movc	a,@a+pc
      0005CD F5 82            [12] 2393 	mov	dpl,a
      0005CF EE               [12] 2394 	mov	a,r6
      0005D0 24 12            [12] 2395 	add	a,#(00143$-3-.)
      0005D2 83               [24] 2396 	movc	a,@a+pc
      0005D3 F5 83            [12] 2397 	mov	dph,a
      0005D5 E4               [12] 2398 	clr	a
      0005D6 73               [24] 2399 	jmp	@a+dptr
      0005D7                       2400 00142$:
      0005D7rF3                    2401 	.db	00103$
      0005D8r2D                    2402 	.db	00104$
      0005D9r68                    2403 	.db	00105$
      0005DArA3                    2404 	.db	00106$
      0005DBrDE                    2405 	.db	00107$
      0005DCr9E                    2406 	.db	00119$
      0005DDr52                    2407 	.db	00112$
      0005DEr8D                    2408 	.db	00113$
      0005DFrC8                    2409 	.db	00114$
      0005E0r9E                    2410 	.db	00119$
      0005E1r03                    2411 	.db	00115$
      0005E2r26                    2412 	.db	00116$
      0005E3r48                    2413 	.db	00117$
      0005E4r73                    2414 	.db	00118$
      0005E5                       2415 00143$:
      0005E5s05                    2416 	.db	00103$>>8
      0005E6s06                    2417 	.db	00104$>>8
      0005E7s06                    2418 	.db	00105$>>8
      0005E8s06                    2419 	.db	00106$>>8
      0005E9s06                    2420 	.db	00107$>>8
      0005EAs08                    2421 	.db	00119$>>8
      0005EBs07                    2422 	.db	00112$>>8
      0005ECs07                    2423 	.db	00113$>>8
      0005EDs07                    2424 	.db	00114$>>8
      0005EEs08                    2425 	.db	00119$>>8
      0005EFs08                    2426 	.db	00115$>>8
      0005F0s08                    2427 	.db	00116$>>8
      0005F1s08                    2428 	.db	00117$>>8
      0005F2s08                    2429 	.db	00118$>>8
                                   2430 ;	../../cpu/cc253x/dev/cc2530-rf.c:662: case RADIO_PARAM_POWER_MODE:
      0005F3                       2431 00103$:
                                   2432 ;	../../cpu/cc253x/dev/cc2530-rf.c:663: *value = RXENABLE == 0 ? RADIO_POWER_MODE_OFF : RADIO_POWER_MODE_ON;
      0005F3 E5 81            [12] 2433 	mov	a,sp
      0005F5 24 FB            [12] 2434 	add	a,#0xfb
      0005F7 F8               [12] 2435 	mov	r0,a
      0005F8 86 05            [24] 2436 	mov	ar5,@r0
      0005FA 08               [12] 2437 	inc	r0
      0005FB 86 06            [24] 2438 	mov	ar6,@r0
      0005FD 08               [12] 2439 	inc	r0
      0005FE 86 07            [24] 2440 	mov	ar7,@r0
      000600 90 61 8B         [24] 2441 	mov	dptr,#_RXENABLE
      000603 E0               [24] 2442 	movx	a,@dptr
      000604 FC               [12] 2443 	mov	r4,a
      000605 B4 01 00         [24] 2444 	cjne	a,#0x01,00144$
      000608                       2445 00144$:
      000608 E4               [12] 2446 	clr	a
      000609 33               [12] 2447 	rlc	a
      00060A FC               [12] 2448 	mov	r4,a
      00060B 60 04            [24] 2449 	jz	00123$
      00060D 7C 00            [12] 2450 	mov	r4,#0x00
      00060F 80 02            [24] 2451 	sjmp	00124$
      000611                       2452 00123$:
      000611 7C 01            [12] 2453 	mov	r4,#0x01
      000613                       2454 00124$:
      000613 EC               [12] 2455 	mov	a,r4
      000614 33               [12] 2456 	rlc	a
      000615 95 E0            [12] 2457 	subb	a,acc
      000617 FB               [12] 2458 	mov	r3,a
      000618 8D 82            [24] 2459 	mov	dpl,r5
      00061A 8E 83            [24] 2460 	mov	dph,r6
      00061C 8F F0            [24] 2461 	mov	b,r7
      00061E EC               [12] 2462 	mov	a,r4
      00061F 12r00r00         [24] 2463 	lcall	__gptrput
      000622 A3               [24] 2464 	inc	dptr
      000623 EB               [12] 2465 	mov	a,r3
      000624 12r00r00         [24] 2466 	lcall	__gptrput
                                   2467 ;	../../cpu/cc253x/dev/cc2530-rf.c:664: return RADIO_RESULT_OK;
      000627 75 82 00         [24] 2468 	mov	dpl,#0x00
      00062A 02r08rA1         [24] 2469 	ljmp	00121$
                                   2470 ;	../../cpu/cc253x/dev/cc2530-rf.c:665: case RADIO_PARAM_CHANNEL:
      00062D                       2471 00104$:
                                   2472 ;	../../cpu/cc253x/dev/cc2530-rf.c:666: *value = (radio_value_t)get_channel();
      00062D E5 81            [12] 2473 	mov	a,sp
      00062F 24 FB            [12] 2474 	add	a,#0xfb
      000631 F8               [12] 2475 	mov	r0,a
      000632 86 05            [24] 2476 	mov	ar5,@r0
      000634 08               [12] 2477 	inc	r0
      000635 86 06            [24] 2478 	mov	ar6,@r0
      000637 08               [12] 2479 	inc	r0
      000638 86 07            [24] 2480 	mov	ar7,@r0
      00063A C0 07            [24] 2481 	push	ar7
      00063C C0 06            [24] 2482 	push	ar6
      00063E C0 05            [24] 2483 	push	ar5
      000640 78r00            [12] 2484 	mov	r0,#_get_channel
      000642 79s00            [12] 2485 	mov	r1,#(_get_channel >> 8)
      000644 7As00            [12] 2486 	mov	r2,#(_get_channel >> 16)
      000646 12r00r00         [24] 2487 	lcall	__sdcc_banked_call
      000649 AC 82            [24] 2488 	mov	r4,dpl
      00064B D0 05            [24] 2489 	pop	ar5
      00064D D0 06            [24] 2490 	pop	ar6
      00064F D0 07            [24] 2491 	pop	ar7
      000651 7B 00            [12] 2492 	mov	r3,#0x00
      000653 8D 82            [24] 2493 	mov	dpl,r5
      000655 8E 83            [24] 2494 	mov	dph,r6
      000657 8F F0            [24] 2495 	mov	b,r7
      000659 EC               [12] 2496 	mov	a,r4
      00065A 12r00r00         [24] 2497 	lcall	__gptrput
      00065D A3               [24] 2498 	inc	dptr
      00065E EB               [12] 2499 	mov	a,r3
      00065F 12r00r00         [24] 2500 	lcall	__gptrput
                                   2501 ;	../../cpu/cc253x/dev/cc2530-rf.c:667: return RADIO_RESULT_OK;
      000662 75 82 00         [24] 2502 	mov	dpl,#0x00
      000665 02r08rA1         [24] 2503 	ljmp	00121$
                                   2504 ;	../../cpu/cc253x/dev/cc2530-rf.c:668: case RADIO_PARAM_PAN_ID:
      000668                       2505 00105$:
                                   2506 ;	../../cpu/cc253x/dev/cc2530-rf.c:669: *value = get_pan_id();
      000668 E5 81            [12] 2507 	mov	a,sp
      00066A 24 FB            [12] 2508 	add	a,#0xfb
      00066C F8               [12] 2509 	mov	r0,a
      00066D 86 05            [24] 2510 	mov	ar5,@r0
      00066F 08               [12] 2511 	inc	r0
      000670 86 06            [24] 2512 	mov	ar6,@r0
      000672 08               [12] 2513 	inc	r0
      000673 86 07            [24] 2514 	mov	ar7,@r0
      000675 C0 07            [24] 2515 	push	ar7
      000677 C0 06            [24] 2516 	push	ar6
      000679 C0 05            [24] 2517 	push	ar5
      00067B 78r66            [12] 2518 	mov	r0,#_get_pan_id
      00067D 79s00            [12] 2519 	mov	r1,#(_get_pan_id >> 8)
      00067F 7As00            [12] 2520 	mov	r2,#(_get_pan_id >> 16)
      000681 12r00r00         [24] 2521 	lcall	__sdcc_banked_call
      000684 AB 82            [24] 2522 	mov	r3,dpl
      000686 AC 83            [24] 2523 	mov	r4,dph
      000688 D0 05            [24] 2524 	pop	ar5
      00068A D0 06            [24] 2525 	pop	ar6
      00068C D0 07            [24] 2526 	pop	ar7
      00068E 8D 82            [24] 2527 	mov	dpl,r5
      000690 8E 83            [24] 2528 	mov	dph,r6
      000692 8F F0            [24] 2529 	mov	b,r7
      000694 EB               [12] 2530 	mov	a,r3
      000695 12r00r00         [24] 2531 	lcall	__gptrput
      000698 A3               [24] 2532 	inc	dptr
      000699 EC               [12] 2533 	mov	a,r4
      00069A 12r00r00         [24] 2534 	lcall	__gptrput
                                   2535 ;	../../cpu/cc253x/dev/cc2530-rf.c:670: return RADIO_RESULT_OK;
      00069D 75 82 00         [24] 2536 	mov	dpl,#0x00
      0006A0 02r08rA1         [24] 2537 	ljmp	00121$
                                   2538 ;	../../cpu/cc253x/dev/cc2530-rf.c:671: case RADIO_PARAM_16BIT_ADDR:
      0006A3                       2539 00106$:
                                   2540 ;	../../cpu/cc253x/dev/cc2530-rf.c:672: *value = get_short_addr();
      0006A3 E5 81            [12] 2541 	mov	a,sp
      0006A5 24 FB            [12] 2542 	add	a,#0xfb
      0006A7 F8               [12] 2543 	mov	r0,a
      0006A8 86 05            [24] 2544 	mov	ar5,@r0
      0006AA 08               [12] 2545 	inc	r0
      0006AB 86 06            [24] 2546 	mov	ar6,@r0
      0006AD 08               [12] 2547 	inc	r0
      0006AE 86 07            [24] 2548 	mov	ar7,@r0
      0006B0 C0 07            [24] 2549 	push	ar7
      0006B2 C0 06            [24] 2550 	push	ar6
      0006B4 C0 05            [24] 2551 	push	ar5
      0006B6 78r95            [12] 2552 	mov	r0,#_get_short_addr
      0006B8 79s00            [12] 2553 	mov	r1,#(_get_short_addr >> 8)
      0006BA 7As00            [12] 2554 	mov	r2,#(_get_short_addr >> 16)
      0006BC 12r00r00         [24] 2555 	lcall	__sdcc_banked_call
      0006BF AB 82            [24] 2556 	mov	r3,dpl
      0006C1 AC 83            [24] 2557 	mov	r4,dph
      0006C3 D0 05            [24] 2558 	pop	ar5
      0006C5 D0 06            [24] 2559 	pop	ar6
      0006C7 D0 07            [24] 2560 	pop	ar7
      0006C9 8D 82            [24] 2561 	mov	dpl,r5
      0006CB 8E 83            [24] 2562 	mov	dph,r6
      0006CD 8F F0            [24] 2563 	mov	b,r7
      0006CF EB               [12] 2564 	mov	a,r3
      0006D0 12r00r00         [24] 2565 	lcall	__gptrput
      0006D3 A3               [24] 2566 	inc	dptr
      0006D4 EC               [12] 2567 	mov	a,r4
      0006D5 12r00r00         [24] 2568 	lcall	__gptrput
                                   2569 ;	../../cpu/cc253x/dev/cc2530-rf.c:673: return RADIO_RESULT_OK;
      0006D8 75 82 00         [24] 2570 	mov	dpl,#0x00
      0006DB 02r08rA1         [24] 2571 	ljmp	00121$
                                   2572 ;	../../cpu/cc253x/dev/cc2530-rf.c:674: case RADIO_PARAM_RX_MODE:
      0006DE                       2573 00107$:
                                   2574 ;	../../cpu/cc253x/dev/cc2530-rf.c:675: *value = 0;
      0006DE E5 81            [12] 2575 	mov	a,sp
      0006E0 24 FB            [12] 2576 	add	a,#0xfb
      0006E2 F8               [12] 2577 	mov	r0,a
      0006E3 86 05            [24] 2578 	mov	ar5,@r0
      0006E5 08               [12] 2579 	inc	r0
      0006E6 86 06            [24] 2580 	mov	ar6,@r0
      0006E8 08               [12] 2581 	inc	r0
      0006E9 86 07            [24] 2582 	mov	ar7,@r0
      0006EB 8D 82            [24] 2583 	mov	dpl,r5
      0006ED 8E 83            [24] 2584 	mov	dph,r6
      0006EF 8F F0            [24] 2585 	mov	b,r7
      0006F1 E4               [12] 2586 	clr	a
      0006F2 12r00r00         [24] 2587 	lcall	__gptrput
      0006F5 A3               [24] 2588 	inc	dptr
      0006F6 E4               [12] 2589 	clr	a
      0006F7 12r00r00         [24] 2590 	lcall	__gptrput
                                   2591 ;	../../cpu/cc253x/dev/cc2530-rf.c:676: if(FRMFILT0 & FRMFILT0_FRAME_FILTER_EN) {
      0006FA 90 61 80         [24] 2592 	mov	dptr,#_FRMFILT0
      0006FD E0               [24] 2593 	movx	a,@dptr
      0006FE FC               [12] 2594 	mov	r4,a
      0006FF 30 E0 21         [24] 2595 	jnb	acc.0,00109$
                                   2596 ;	../../cpu/cc253x/dev/cc2530-rf.c:677: *value |= RADIO_RX_MODE_ADDRESS_FILTER;
      000702 8D 82            [24] 2597 	mov	dpl,r5
      000704 8E 83            [24] 2598 	mov	dph,r6
      000706 8F F0            [24] 2599 	mov	b,r7
      000708 12r00r00         [24] 2600 	lcall	__gptrget
      00070B FB               [12] 2601 	mov	r3,a
      00070C A3               [24] 2602 	inc	dptr
      00070D 12r00r00         [24] 2603 	lcall	__gptrget
      000710 FC               [12] 2604 	mov	r4,a
      000711 43 03 01         [24] 2605 	orl	ar3,#0x01
      000714 8D 82            [24] 2606 	mov	dpl,r5
      000716 8E 83            [24] 2607 	mov	dph,r6
      000718 8F F0            [24] 2608 	mov	b,r7
      00071A EB               [12] 2609 	mov	a,r3
      00071B 12r00r00         [24] 2610 	lcall	__gptrput
      00071E A3               [24] 2611 	inc	dptr
      00071F EC               [12] 2612 	mov	a,r4
      000720 12r00r00         [24] 2613 	lcall	__gptrput
      000723                       2614 00109$:
                                   2615 ;	../../cpu/cc253x/dev/cc2530-rf.c:679: if(FRMCTRL0 & FRMCTRL0_AUTOACK) {
      000723 90 61 89         [24] 2616 	mov	dptr,#_FRMCTRL0
      000726 E0               [24] 2617 	movx	a,@dptr
      000727 FC               [12] 2618 	mov	r4,a
      000728 30 E5 21         [24] 2619 	jnb	acc.5,00111$
                                   2620 ;	../../cpu/cc253x/dev/cc2530-rf.c:680: *value |= RADIO_RX_MODE_AUTOACK;
      00072B 8D 82            [24] 2621 	mov	dpl,r5
      00072D 8E 83            [24] 2622 	mov	dph,r6
      00072F 8F F0            [24] 2623 	mov	b,r7
      000731 12r00r00         [24] 2624 	lcall	__gptrget
      000734 FB               [12] 2625 	mov	r3,a
      000735 A3               [24] 2626 	inc	dptr
      000736 12r00r00         [24] 2627 	lcall	__gptrget
      000739 FC               [12] 2628 	mov	r4,a
      00073A 43 03 02         [24] 2629 	orl	ar3,#0x02
      00073D 8D 82            [24] 2630 	mov	dpl,r5
      00073F 8E 83            [24] 2631 	mov	dph,r6
      000741 8F F0            [24] 2632 	mov	b,r7
      000743 EB               [12] 2633 	mov	a,r3
      000744 12r00r00         [24] 2634 	lcall	__gptrput
      000747 A3               [24] 2635 	inc	dptr
      000748 EC               [12] 2636 	mov	a,r4
      000749 12r00r00         [24] 2637 	lcall	__gptrput
      00074C                       2638 00111$:
                                   2639 ;	../../cpu/cc253x/dev/cc2530-rf.c:682: return RADIO_RESULT_OK;
      00074C 75 82 00         [24] 2640 	mov	dpl,#0x00
      00074F 02r08rA1         [24] 2641 	ljmp	00121$
                                   2642 ;	../../cpu/cc253x/dev/cc2530-rf.c:683: case RADIO_PARAM_TXPOWER:
      000752                       2643 00112$:
                                   2644 ;	../../cpu/cc253x/dev/cc2530-rf.c:684: *value = get_tx_power();
      000752 E5 81            [12] 2645 	mov	a,sp
      000754 24 FB            [12] 2646 	add	a,#0xfb
      000756 F8               [12] 2647 	mov	r0,a
      000757 86 05            [24] 2648 	mov	ar5,@r0
      000759 08               [12] 2649 	inc	r0
      00075A 86 06            [24] 2650 	mov	ar6,@r0
      00075C 08               [12] 2651 	inc	r0
      00075D 86 07            [24] 2652 	mov	ar7,@r0
      00075F C0 07            [24] 2653 	push	ar7
      000761 C0 06            [24] 2654 	push	ar6
      000763 C0 05            [24] 2655 	push	ar5
      000765 78r34            [12] 2656 	mov	r0,#_get_tx_power
      000767 79s01            [12] 2657 	mov	r1,#(_get_tx_power >> 8)
      000769 7As00            [12] 2658 	mov	r2,#(_get_tx_power >> 16)
      00076B 12r00r00         [24] 2659 	lcall	__sdcc_banked_call
      00076E AB 82            [24] 2660 	mov	r3,dpl
      000770 AC 83            [24] 2661 	mov	r4,dph
      000772 D0 05            [24] 2662 	pop	ar5
      000774 D0 06            [24] 2663 	pop	ar6
      000776 D0 07            [24] 2664 	pop	ar7
      000778 8D 82            [24] 2665 	mov	dpl,r5
      00077A 8E 83            [24] 2666 	mov	dph,r6
      00077C 8F F0            [24] 2667 	mov	b,r7
      00077E EB               [12] 2668 	mov	a,r3
      00077F 12r00r00         [24] 2669 	lcall	__gptrput
      000782 A3               [24] 2670 	inc	dptr
      000783 EC               [12] 2671 	mov	a,r4
      000784 12r00r00         [24] 2672 	lcall	__gptrput
                                   2673 ;	../../cpu/cc253x/dev/cc2530-rf.c:685: return RADIO_RESULT_OK;
      000787 75 82 00         [24] 2674 	mov	dpl,#0x00
      00078A 02r08rA1         [24] 2675 	ljmp	00121$
                                   2676 ;	../../cpu/cc253x/dev/cc2530-rf.c:686: case RADIO_PARAM_CCA_THRESHOLD:
      00078D                       2677 00113$:
                                   2678 ;	../../cpu/cc253x/dev/cc2530-rf.c:687: *value = get_cca_threshold();
      00078D E5 81            [12] 2679 	mov	a,sp
      00078F 24 FB            [12] 2680 	add	a,#0xfb
      000791 F8               [12] 2681 	mov	r0,a
      000792 86 05            [24] 2682 	mov	ar5,@r0
      000794 08               [12] 2683 	inc	r0
      000795 86 06            [24] 2684 	mov	ar6,@r0
      000797 08               [12] 2685 	inc	r0
      000798 86 07            [24] 2686 	mov	ar7,@r0
      00079A C0 07            [24] 2687 	push	ar7
      00079C C0 06            [24] 2688 	push	ar6
      00079E C0 05            [24] 2689 	push	ar5
      0007A0 78r0E            [12] 2690 	mov	r0,#_get_cca_threshold
      0007A2 79s01            [12] 2691 	mov	r1,#(_get_cca_threshold >> 8)
      0007A4 7As00            [12] 2692 	mov	r2,#(_get_cca_threshold >> 16)
      0007A6 12r00r00         [24] 2693 	lcall	__sdcc_banked_call
      0007A9 AB 82            [24] 2694 	mov	r3,dpl
      0007AB AC 83            [24] 2695 	mov	r4,dph
      0007AD D0 05            [24] 2696 	pop	ar5
      0007AF D0 06            [24] 2697 	pop	ar6
      0007B1 D0 07            [24] 2698 	pop	ar7
      0007B3 8D 82            [24] 2699 	mov	dpl,r5
      0007B5 8E 83            [24] 2700 	mov	dph,r6
      0007B7 8F F0            [24] 2701 	mov	b,r7
      0007B9 EB               [12] 2702 	mov	a,r3
      0007BA 12r00r00         [24] 2703 	lcall	__gptrput
      0007BD A3               [24] 2704 	inc	dptr
      0007BE EC               [12] 2705 	mov	a,r4
      0007BF 12r00r00         [24] 2706 	lcall	__gptrput
                                   2707 ;	../../cpu/cc253x/dev/cc2530-rf.c:688: return RADIO_RESULT_OK;
      0007C2 75 82 00         [24] 2708 	mov	dpl,#0x00
      0007C5 02r08rA1         [24] 2709 	ljmp	00121$
                                   2710 ;	../../cpu/cc253x/dev/cc2530-rf.c:689: case RADIO_PARAM_RSSI:
      0007C8                       2711 00114$:
                                   2712 ;	../../cpu/cc253x/dev/cc2530-rf.c:690: *value = get_rssi();
      0007C8 E5 81            [12] 2713 	mov	a,sp
      0007CA 24 FB            [12] 2714 	add	a,#0xfb
      0007CC F8               [12] 2715 	mov	r0,a
      0007CD 86 05            [24] 2716 	mov	ar5,@r0
      0007CF 08               [12] 2717 	inc	r0
      0007D0 86 06            [24] 2718 	mov	ar6,@r0
      0007D2 08               [12] 2719 	inc	r0
      0007D3 86 07            [24] 2720 	mov	ar7,@r0
      0007D5 C0 07            [24] 2721 	push	ar7
      0007D7 C0 06            [24] 2722 	push	ar6
      0007D9 C0 05            [24] 2723 	push	ar5
      0007DB 78rC4            [12] 2724 	mov	r0,#_get_rssi
      0007DD 79s00            [12] 2725 	mov	r1,#(_get_rssi >> 8)
      0007DF 7As00            [12] 2726 	mov	r2,#(_get_rssi >> 16)
      0007E1 12r00r00         [24] 2727 	lcall	__sdcc_banked_call
      0007E4 AB 82            [24] 2728 	mov	r3,dpl
      0007E6 AC 83            [24] 2729 	mov	r4,dph
      0007E8 D0 05            [24] 2730 	pop	ar5
      0007EA D0 06            [24] 2731 	pop	ar6
      0007EC D0 07            [24] 2732 	pop	ar7
      0007EE 8D 82            [24] 2733 	mov	dpl,r5
      0007F0 8E 83            [24] 2734 	mov	dph,r6
      0007F2 8F F0            [24] 2735 	mov	b,r7
      0007F4 EB               [12] 2736 	mov	a,r3
      0007F5 12r00r00         [24] 2737 	lcall	__gptrput
      0007F8 A3               [24] 2738 	inc	dptr
      0007F9 EC               [12] 2739 	mov	a,r4
      0007FA 12r00r00         [24] 2740 	lcall	__gptrput
                                   2741 ;	../../cpu/cc253x/dev/cc2530-rf.c:691: return RADIO_RESULT_OK;
      0007FD 75 82 00         [24] 2742 	mov	dpl,#0x00
      000800 02r08rA1         [24] 2743 	ljmp	00121$
                                   2744 ;	../../cpu/cc253x/dev/cc2530-rf.c:692: case RADIO_CONST_CHANNEL_MIN:
      000803                       2745 00115$:
                                   2746 ;	../../cpu/cc253x/dev/cc2530-rf.c:693: *value = CC2530_RF_CHANNEL_MIN;
      000803 E5 81            [12] 2747 	mov	a,sp
      000805 24 FB            [12] 2748 	add	a,#0xfb
      000807 F8               [12] 2749 	mov	r0,a
      000808 86 05            [24] 2750 	mov	ar5,@r0
      00080A 08               [12] 2751 	inc	r0
      00080B 86 06            [24] 2752 	mov	ar6,@r0
      00080D 08               [12] 2753 	inc	r0
      00080E 86 07            [24] 2754 	mov	ar7,@r0
      000810 8D 82            [24] 2755 	mov	dpl,r5
      000812 8E 83            [24] 2756 	mov	dph,r6
      000814 8F F0            [24] 2757 	mov	b,r7
      000816 74 0B            [12] 2758 	mov	a,#0x0B
      000818 12r00r00         [24] 2759 	lcall	__gptrput
      00081B A3               [24] 2760 	inc	dptr
      00081C E4               [12] 2761 	clr	a
      00081D 12r00r00         [24] 2762 	lcall	__gptrput
                                   2763 ;	../../cpu/cc253x/dev/cc2530-rf.c:694: return RADIO_RESULT_OK;
      000820 75 82 00         [24] 2764 	mov	dpl,#0x00
      000823 02r08rA1         [24] 2765 	ljmp	00121$
                                   2766 ;	../../cpu/cc253x/dev/cc2530-rf.c:695: case RADIO_CONST_CHANNEL_MAX:
      000826                       2767 00116$:
                                   2768 ;	../../cpu/cc253x/dev/cc2530-rf.c:696: *value = CC2530_RF_CHANNEL_MAX;
      000826 E5 81            [12] 2769 	mov	a,sp
      000828 24 FB            [12] 2770 	add	a,#0xfb
      00082A F8               [12] 2771 	mov	r0,a
      00082B 86 05            [24] 2772 	mov	ar5,@r0
      00082D 08               [12] 2773 	inc	r0
      00082E 86 06            [24] 2774 	mov	ar6,@r0
      000830 08               [12] 2775 	inc	r0
      000831 86 07            [24] 2776 	mov	ar7,@r0
      000833 8D 82            [24] 2777 	mov	dpl,r5
      000835 8E 83            [24] 2778 	mov	dph,r6
      000837 8F F0            [24] 2779 	mov	b,r7
      000839 74 1A            [12] 2780 	mov	a,#0x1A
      00083B 12r00r00         [24] 2781 	lcall	__gptrput
      00083E A3               [24] 2782 	inc	dptr
      00083F E4               [12] 2783 	clr	a
      000840 12r00r00         [24] 2784 	lcall	__gptrput
                                   2785 ;	../../cpu/cc253x/dev/cc2530-rf.c:697: return RADIO_RESULT_OK;
      000843 75 82 00         [24] 2786 	mov	dpl,#0x00
                                   2787 ;	../../cpu/cc253x/dev/cc2530-rf.c:698: case RADIO_CONST_TXPOWER_MIN:
      000846 80 59            [24] 2788 	sjmp	00121$
      000848                       2789 00117$:
                                   2790 ;	../../cpu/cc253x/dev/cc2530-rf.c:699: *value = OUTPUT_POWER_MIN;
      000848 E5 81            [12] 2791 	mov	a,sp
      00084A 24 FB            [12] 2792 	add	a,#0xfb
      00084C F8               [12] 2793 	mov	r0,a
      00084D 86 05            [24] 2794 	mov	ar5,@r0
      00084F 08               [12] 2795 	inc	r0
      000850 86 06            [24] 2796 	mov	ar6,@r0
      000852 08               [12] 2797 	inc	r0
      000853 86 07            [24] 2798 	mov	ar7,@r0
      000855 90r00r30         [24] 2799 	mov	dptr,#(_output_power + 0x0030)
      000858 E4               [12] 2800 	clr	a
      000859 93               [24] 2801 	movc	a,@a+dptr
      00085A FB               [12] 2802 	mov	r3,a
      00085B A3               [24] 2803 	inc	dptr
      00085C E4               [12] 2804 	clr	a
      00085D 93               [24] 2805 	movc	a,@a+dptr
      00085E FC               [12] 2806 	mov	r4,a
      00085F 8D 82            [24] 2807 	mov	dpl,r5
      000861 8E 83            [24] 2808 	mov	dph,r6
      000863 8F F0            [24] 2809 	mov	b,r7
      000865 EB               [12] 2810 	mov	a,r3
      000866 12r00r00         [24] 2811 	lcall	__gptrput
      000869 A3               [24] 2812 	inc	dptr
      00086A EC               [12] 2813 	mov	a,r4
      00086B 12r00r00         [24] 2814 	lcall	__gptrput
                                   2815 ;	../../cpu/cc253x/dev/cc2530-rf.c:700: return RADIO_RESULT_OK;
      00086E 75 82 00         [24] 2816 	mov	dpl,#0x00
                                   2817 ;	../../cpu/cc253x/dev/cc2530-rf.c:701: case RADIO_CONST_TXPOWER_MAX:
      000871 80 2E            [24] 2818 	sjmp	00121$
      000873                       2819 00118$:
                                   2820 ;	../../cpu/cc253x/dev/cc2530-rf.c:702: *value = OUTPUT_POWER_MAX;
      000873 E5 81            [12] 2821 	mov	a,sp
      000875 24 FB            [12] 2822 	add	a,#0xfb
      000877 F8               [12] 2823 	mov	r0,a
      000878 86 05            [24] 2824 	mov	ar5,@r0
      00087A 08               [12] 2825 	inc	r0
      00087B 86 06            [24] 2826 	mov	ar6,@r0
      00087D 08               [12] 2827 	inc	r0
      00087E 86 07            [24] 2828 	mov	ar7,@r0
      000880 90r00r00         [24] 2829 	mov	dptr,#_output_power
      000883 E4               [12] 2830 	clr	a
      000884 93               [24] 2831 	movc	a,@a+dptr
      000885 FB               [12] 2832 	mov	r3,a
      000886 A3               [24] 2833 	inc	dptr
      000887 E4               [12] 2834 	clr	a
      000888 93               [24] 2835 	movc	a,@a+dptr
      000889 FC               [12] 2836 	mov	r4,a
      00088A 8D 82            [24] 2837 	mov	dpl,r5
      00088C 8E 83            [24] 2838 	mov	dph,r6
      00088E 8F F0            [24] 2839 	mov	b,r7
      000890 EB               [12] 2840 	mov	a,r3
      000891 12r00r00         [24] 2841 	lcall	__gptrput
      000894 A3               [24] 2842 	inc	dptr
      000895 EC               [12] 2843 	mov	a,r4
      000896 12r00r00         [24] 2844 	lcall	__gptrput
                                   2845 ;	../../cpu/cc253x/dev/cc2530-rf.c:703: return RADIO_RESULT_OK;
      000899 75 82 00         [24] 2846 	mov	dpl,#0x00
                                   2847 ;	../../cpu/cc253x/dev/cc2530-rf.c:704: default:
      00089C 80 03            [24] 2848 	sjmp	00121$
      00089E                       2849 00119$:
                                   2850 ;	../../cpu/cc253x/dev/cc2530-rf.c:705: return RADIO_RESULT_NOT_SUPPORTED;
      00089E 75 82 01         [24] 2851 	mov	dpl,#0x01
                                   2852 ;	../../cpu/cc253x/dev/cc2530-rf.c:706: }
      0008A1                       2853 00121$:
      0008A1 02r00r00         [24] 2854 	ljmp	__sdcc_banked_ret
                                   2855 ;------------------------------------------------------------
                                   2856 ;Allocation info for local variables in function 'set_value'
                                   2857 ;------------------------------------------------------------
                                   2858 ;value                     Allocated to stack - sp -4
                                   2859 ;param                     Allocated to registers r6 r7 
                                   2860 ;------------------------------------------------------------
                                   2861 ;	../../cpu/cc253x/dev/cc2530-rf.c:710: set_value(radio_param_t param, radio_value_t value)
                                   2862 ;	-----------------------------------------
                                   2863 ;	 function set_value
                                   2864 ;	-----------------------------------------
      0008A4                       2865 _set_value:
      0008A4 AE 82            [24] 2866 	mov	r6,dpl
      0008A6 AF 83            [24] 2867 	mov	r7,dph
                                   2868 ;	../../cpu/cc253x/dev/cc2530-rf.c:712: switch(param) {
      0008A8 C3               [12] 2869 	clr	c
      0008A9 74 07            [12] 2870 	mov	a,#0x07
      0008AB 9E               [12] 2871 	subb	a,r6
      0008AC E4               [12] 2872 	clr	a
      0008AD 9F               [12] 2873 	subb	a,r7
      0008AE 50 03            [24] 2874 	jnc	00147$
      0008B0 02r0Ar69         [24] 2875 	ljmp	00122$
      0008B3                       2876 00147$:
      0008B3 EE               [12] 2877 	mov	a,r6
      0008B4 24 0A            [12] 2878 	add	a,#(00148$-3-.)
      0008B6 83               [24] 2879 	movc	a,@a+pc
      0008B7 F5 82            [12] 2880 	mov	dpl,a
      0008B9 EE               [12] 2881 	mov	a,r6
      0008BA 24 0C            [12] 2882 	add	a,#(00149$-3-.)
      0008BC 83               [24] 2883 	movc	a,@a+pc
      0008BD F5 83            [12] 2884 	mov	dph,a
      0008BF E4               [12] 2885 	clr	a
      0008C0 73               [24] 2886 	jmp	@a+dptr
      0008C1                       2887 00148$:
      0008C1rD1                    2888 	.db	00101$
      0008C2r0B                    2889 	.db	00106$
      0008C3r5B                    2890 	.db	00112$
      0008C4r78                    2891 	.db	00113$
      0008C5r95                    2892 	.db	00114$
      0008C6r69                    2893 	.db	00122$
      0008C7rF6                    2894 	.db	00117$
      0008C8r51                    2895 	.db	00121$
      0008C9                       2896 00149$:
      0008C9s08                    2897 	.db	00101$>>8
      0008CAs09                    2898 	.db	00106$>>8
      0008CBs09                    2899 	.db	00112$>>8
      0008CCs09                    2900 	.db	00113$>>8
      0008CDs09                    2901 	.db	00114$>>8
      0008CEs0A                    2902 	.db	00122$>>8
      0008CFs09                    2903 	.db	00117$>>8
      0008D0s0A                    2904 	.db	00121$>>8
                                   2905 ;	../../cpu/cc253x/dev/cc2530-rf.c:713: case RADIO_PARAM_POWER_MODE:
      0008D1                       2906 00101$:
                                   2907 ;	../../cpu/cc253x/dev/cc2530-rf.c:714: if(value == RADIO_POWER_MODE_ON) {
      0008D1 E5 81            [12] 2908 	mov	a,sp
      0008D3 24 FC            [12] 2909 	add	a,#0xfc
      0008D5 F8               [12] 2910 	mov	r0,a
      0008D6 B6 01 13         [24] 2911 	cjne	@r0,#0x01,00103$
      0008D9 08               [12] 2912 	inc	r0
      0008DA B6 00 0F         [24] 2913 	cjne	@r0,#0x00,00103$
                                   2914 ;	../../cpu/cc253x/dev/cc2530-rf.c:715: on();
      0008DD 78r7D            [12] 2915 	mov	r0,#_on
      0008DF 79s05            [12] 2916 	mov	r1,#(_on >> 8)
      0008E1 7As00            [12] 2917 	mov	r2,#(_on >> 16)
      0008E3 12r00r00         [24] 2918 	lcall	__sdcc_banked_call
                                   2919 ;	../../cpu/cc253x/dev/cc2530-rf.c:716: return RADIO_RESULT_OK;
      0008E6 75 82 00         [24] 2920 	mov	dpl,#0x00
      0008E9 02r0Ar6C         [24] 2921 	ljmp	00124$
      0008EC                       2922 00103$:
                                   2923 ;	../../cpu/cc253x/dev/cc2530-rf.c:718: if(value == RADIO_POWER_MODE_OFF) {
      0008EC E5 81            [12] 2924 	mov	a,sp
      0008EE 24 FC            [12] 2925 	add	a,#0xfc
      0008F0 F8               [12] 2926 	mov	r0,a
      0008F1 E6               [12] 2927 	mov	a,@r0
      0008F2 08               [12] 2928 	inc	r0
      0008F3 46               [12] 2929 	orl	a,@r0
      0008F4 70 0F            [24] 2930 	jnz	00105$
                                   2931 ;	../../cpu/cc253x/dev/cc2530-rf.c:719: off();
      0008F6 78r94            [12] 2932 	mov	r0,#_off
      0008F8 79s05            [12] 2933 	mov	r1,#(_off >> 8)
      0008FA 7As00            [12] 2934 	mov	r2,#(_off >> 16)
      0008FC 12r00r00         [24] 2935 	lcall	__sdcc_banked_call
                                   2936 ;	../../cpu/cc253x/dev/cc2530-rf.c:720: return RADIO_RESULT_OK;
      0008FF 75 82 00         [24] 2937 	mov	dpl,#0x00
      000902 02r0Ar6C         [24] 2938 	ljmp	00124$
      000905                       2939 00105$:
                                   2940 ;	../../cpu/cc253x/dev/cc2530-rf.c:722: return RADIO_RESULT_INVALID_VALUE;
      000905 75 82 02         [24] 2941 	mov	dpl,#0x02
      000908 02r0Ar6C         [24] 2942 	ljmp	00124$
                                   2943 ;	../../cpu/cc253x/dev/cc2530-rf.c:723: case RADIO_PARAM_CHANNEL:
      00090B                       2944 00106$:
                                   2945 ;	../../cpu/cc253x/dev/cc2530-rf.c:724: if(value < CC2530_RF_CHANNEL_MIN || value > CC2530_RF_CHANNEL_MAX) {
      00090B E5 81            [12] 2946 	mov	a,sp
      00090D 24 FC            [12] 2947 	add	a,#0xfc
      00090F F8               [12] 2948 	mov	r0,a
      000910 C3               [12] 2949 	clr	c
      000911 E6               [12] 2950 	mov	a,@r0
      000912 94 0B            [12] 2951 	subb	a,#0x0B
      000914 08               [12] 2952 	inc	r0
      000915 E6               [12] 2953 	mov	a,@r0
      000916 64 80            [12] 2954 	xrl	a,#0x80
      000918 94 80            [12] 2955 	subb	a,#0x80
      00091A 40 16            [24] 2956 	jc	00107$
      00091C E5 81            [12] 2957 	mov	a,sp
      00091E 24 FC            [12] 2958 	add	a,#0xfc
      000920 F8               [12] 2959 	mov	r0,a
      000921 C3               [12] 2960 	clr	c
      000922 74 1A            [12] 2961 	mov	a,#0x1A
      000924 96               [12] 2962 	subb	a,@r0
      000925 E4               [12] 2963 	clr	a
      000926 64 80            [12] 2964 	xrl	a,#0x80
      000928 08               [12] 2965 	inc	r0
      000929 86 F0            [24] 2966 	mov	b,@r0
      00092B 63 F0 80         [24] 2967 	xrl	b,#0x80
      00092E 95 F0            [12] 2968 	subb	a,b
      000930 50 06            [24] 2969 	jnc	00108$
      000932                       2970 00107$:
                                   2971 ;	../../cpu/cc253x/dev/cc2530-rf.c:725: return RADIO_RESULT_INVALID_VALUE;
      000932 75 82 02         [24] 2972 	mov	dpl,#0x02
      000935 02r0Ar6C         [24] 2973 	ljmp	00124$
      000938                       2974 00108$:
                                   2975 ;	../../cpu/cc253x/dev/cc2530-rf.c:727: if(set_channel(value) == CC2530_RF_CHANNEL_SET_ERROR) {
      000938 E5 81            [12] 2976 	mov	a,sp
      00093A 24 FC            [12] 2977 	add	a,#0xfc
      00093C F8               [12] 2978 	mov	r0,a
      00093D 86 07            [24] 2979 	mov	ar7,@r0
      00093F 8F 82            [24] 2980 	mov	dpl,r7
      000941 78r29            [12] 2981 	mov	r0,#_set_channel
      000943 79s00            [12] 2982 	mov	r1,#(_set_channel >> 8)
      000945 7As00            [12] 2983 	mov	r2,#(_set_channel >> 16)
      000947 12r00r00         [24] 2984 	lcall	__sdcc_banked_call
      00094A AF 82            [24] 2985 	mov	r7,dpl
      00094C BF FF 06         [24] 2986 	cjne	r7,#0xFF,00111$
                                   2987 ;	../../cpu/cc253x/dev/cc2530-rf.c:728: return RADIO_RESULT_ERROR;
      00094F 75 82 03         [24] 2988 	mov	dpl,#0x03
      000952 02r0Ar6C         [24] 2989 	ljmp	00124$
      000955                       2990 00111$:
                                   2991 ;	../../cpu/cc253x/dev/cc2530-rf.c:730: return RADIO_RESULT_OK;
      000955 75 82 00         [24] 2992 	mov	dpl,#0x00
      000958 02r0Ar6C         [24] 2993 	ljmp	00124$
                                   2994 ;	../../cpu/cc253x/dev/cc2530-rf.c:731: case RADIO_PARAM_PAN_ID:
      00095B                       2995 00112$:
                                   2996 ;	../../cpu/cc253x/dev/cc2530-rf.c:732: set_pan_id(value & 0xffff);
      00095B E5 81            [12] 2997 	mov	a,sp
      00095D 24 FC            [12] 2998 	add	a,#0xfc
      00095F F8               [12] 2999 	mov	r0,a
      000960 86 06            [24] 3000 	mov	ar6,@r0
      000962 08               [12] 3001 	inc	r0
      000963 86 07            [24] 3002 	mov	ar7,@r0
      000965 8E 82            [24] 3003 	mov	dpl,r6
      000967 8F 83            [24] 3004 	mov	dph,r7
      000969 78r80            [12] 3005 	mov	r0,#_set_pan_id
      00096B 79s00            [12] 3006 	mov	r1,#(_set_pan_id >> 8)
      00096D 7As00            [12] 3007 	mov	r2,#(_set_pan_id >> 16)
      00096F 12r00r00         [24] 3008 	lcall	__sdcc_banked_call
                                   3009 ;	../../cpu/cc253x/dev/cc2530-rf.c:733: return RADIO_RESULT_OK;
      000972 75 82 00         [24] 3010 	mov	dpl,#0x00
      000975 02r0Ar6C         [24] 3011 	ljmp	00124$
                                   3012 ;	../../cpu/cc253x/dev/cc2530-rf.c:734: case RADIO_PARAM_16BIT_ADDR:
      000978                       3013 00113$:
                                   3014 ;	../../cpu/cc253x/dev/cc2530-rf.c:735: set_short_addr(value & 0xffff);
      000978 E5 81            [12] 3015 	mov	a,sp
      00097A 24 FC            [12] 3016 	add	a,#0xfc
      00097C F8               [12] 3017 	mov	r0,a
      00097D 86 06            [24] 3018 	mov	ar6,@r0
      00097F 08               [12] 3019 	inc	r0
      000980 86 07            [24] 3020 	mov	ar7,@r0
      000982 8E 82            [24] 3021 	mov	dpl,r6
      000984 8F 83            [24] 3022 	mov	dph,r7
      000986 78rAF            [12] 3023 	mov	r0,#_set_short_addr
      000988 79s00            [12] 3024 	mov	r1,#(_set_short_addr >> 8)
      00098A 7As00            [12] 3025 	mov	r2,#(_set_short_addr >> 16)
      00098C 12r00r00         [24] 3026 	lcall	__sdcc_banked_call
                                   3027 ;	../../cpu/cc253x/dev/cc2530-rf.c:736: return RADIO_RESULT_OK;
      00098F 75 82 00         [24] 3028 	mov	dpl,#0x00
      000992 02r0Ar6C         [24] 3029 	ljmp	00124$
                                   3030 ;	../../cpu/cc253x/dev/cc2530-rf.c:737: case RADIO_PARAM_RX_MODE:
      000995                       3031 00114$:
                                   3032 ;	../../cpu/cc253x/dev/cc2530-rf.c:739: RADIO_RX_MODE_AUTOACK)) {
      000995 E5 81            [12] 3033 	mov	a,sp
      000997 24 FC            [12] 3034 	add	a,#0xfc
      000999 F8               [12] 3035 	mov	r0,a
      00099A E6               [12] 3036 	mov	a,@r0
      00099B 54 FC            [12] 3037 	anl	a,#0xFC
      00099D 70 04            [24] 3038 	jnz	00157$
      00099F 08               [12] 3039 	inc	r0
      0009A0 E6               [12] 3040 	mov	a,@r0
      0009A1 60 06            [24] 3041 	jz	00116$
      0009A3                       3042 00157$:
                                   3043 ;	../../cpu/cc253x/dev/cc2530-rf.c:740: return RADIO_RESULT_INVALID_VALUE;
      0009A3 75 82 02         [24] 3044 	mov	dpl,#0x02
      0009A6 02r0Ar6C         [24] 3045 	ljmp	00124$
      0009A9                       3046 00116$:
                                   3047 ;	../../cpu/cc253x/dev/cc2530-rf.c:743: set_frame_filtering((value & RADIO_RX_MODE_ADDRESS_FILTER) != 0);
      0009A9 E5 81            [12] 3048 	mov	a,sp
      0009AB 24 FC            [12] 3049 	add	a,#0xfc
      0009AD F8               [12] 3050 	mov	r0,a
      0009AE 74 01            [12] 3051 	mov	a,#0x01
      0009B0 56               [12] 3052 	anl	a,@r0
      0009B1 FE               [12] 3053 	mov	r6,a
      0009B2 7F 00            [12] 3054 	mov	r7,#0x00
      0009B4 E4               [12] 3055 	clr	a
      0009B5 BE 00 04         [24] 3056 	cjne	r6,#0x00,00158$
      0009B8 BF 00 01         [24] 3057 	cjne	r7,#0x00,00158$
      0009BB 04               [12] 3058 	inc	a
      0009BC                       3059 00158$:
      0009BC FE               [12] 3060 	mov	r6,a
      0009BD B4 01 00         [24] 3061 	cjne	a,#0x01,00160$
      0009C0                       3062 00160$:
      0009C0 E4               [12] 3063 	clr	a
      0009C1 33               [12] 3064 	rlc	a
      0009C2 F5 82            [12] 3065 	mov	dpl,a
      0009C4 78r4A            [12] 3066 	mov	r0,#_set_frame_filtering
      0009C6 79s02            [12] 3067 	mov	r1,#(_set_frame_filtering >> 8)
      0009C8 7As00            [12] 3068 	mov	r2,#(_set_frame_filtering >> 16)
      0009CA 12r00r00         [24] 3069 	lcall	__sdcc_banked_call
                                   3070 ;	../../cpu/cc253x/dev/cc2530-rf.c:744: set_auto_ack((value & RADIO_RX_MODE_AUTOACK) != 0);
      0009CD E5 81            [12] 3071 	mov	a,sp
      0009CF 24 FC            [12] 3072 	add	a,#0xfc
      0009D1 F8               [12] 3073 	mov	r0,a
      0009D2 74 02            [12] 3074 	mov	a,#0x02
      0009D4 56               [12] 3075 	anl	a,@r0
      0009D5 FE               [12] 3076 	mov	r6,a
      0009D6 7F 00            [12] 3077 	mov	r7,#0x00
      0009D8 E4               [12] 3078 	clr	a
      0009D9 BE 00 04         [24] 3079 	cjne	r6,#0x00,00161$
      0009DC BF 00 01         [24] 3080 	cjne	r7,#0x00,00161$
      0009DF 04               [12] 3081 	inc	a
      0009E0                       3082 00161$:
      0009E0 FE               [12] 3083 	mov	r6,a
      0009E1 B4 01 00         [24] 3084 	cjne	a,#0x01,00163$
      0009E4                       3085 00163$:
      0009E4 E4               [12] 3086 	clr	a
      0009E5 33               [12] 3087 	rlc	a
      0009E6 F5 82            [12] 3088 	mov	dpl,a
      0009E8 78r64            [12] 3089 	mov	r0,#_set_auto_ack
      0009EA 79s02            [12] 3090 	mov	r1,#(_set_auto_ack >> 8)
      0009EC 7As00            [12] 3091 	mov	r2,#(_set_auto_ack >> 16)
      0009EE 12r00r00         [24] 3092 	lcall	__sdcc_banked_call
                                   3093 ;	../../cpu/cc253x/dev/cc2530-rf.c:746: return RADIO_RESULT_OK;
      0009F1 75 82 00         [24] 3094 	mov	dpl,#0x00
                                   3095 ;	../../cpu/cc253x/dev/cc2530-rf.c:747: case RADIO_PARAM_TXPOWER:
      0009F4 80 76            [24] 3096 	sjmp	00124$
      0009F6                       3097 00117$:
                                   3098 ;	../../cpu/cc253x/dev/cc2530-rf.c:748: if(value < OUTPUT_POWER_MIN || value > OUTPUT_POWER_MAX) {
      0009F6 90r00r30         [24] 3099 	mov	dptr,#(_output_power + 0x0030)
      0009F9 E4               [12] 3100 	clr	a
      0009FA 93               [24] 3101 	movc	a,@a+dptr
      0009FB FE               [12] 3102 	mov	r6,a
      0009FC A3               [24] 3103 	inc	dptr
      0009FD E4               [12] 3104 	clr	a
      0009FE 93               [24] 3105 	movc	a,@a+dptr
      0009FF FF               [12] 3106 	mov	r7,a
      000A00 E5 81            [12] 3107 	mov	a,sp
      000A02 24 FC            [12] 3108 	add	a,#0xfc
      000A04 F8               [12] 3109 	mov	r0,a
      000A05 C3               [12] 3110 	clr	c
      000A06 E6               [12] 3111 	mov	a,@r0
      000A07 9E               [12] 3112 	subb	a,r6
      000A08 08               [12] 3113 	inc	r0
      000A09 E6               [12] 3114 	mov	a,@r0
      000A0A 64 80            [12] 3115 	xrl	a,#0x80
      000A0C 8F F0            [24] 3116 	mov	b,r7
      000A0E 63 F0 80         [24] 3117 	xrl	b,#0x80
      000A11 95 F0            [12] 3118 	subb	a,b
      000A13 40 1F            [24] 3119 	jc	00118$
      000A15 90r00r00         [24] 3120 	mov	dptr,#_output_power
      000A18 E4               [12] 3121 	clr	a
      000A19 93               [24] 3122 	movc	a,@a+dptr
      000A1A FE               [12] 3123 	mov	r6,a
      000A1B A3               [24] 3124 	inc	dptr
      000A1C E4               [12] 3125 	clr	a
      000A1D 93               [24] 3126 	movc	a,@a+dptr
      000A1E FF               [12] 3127 	mov	r7,a
      000A1F E5 81            [12] 3128 	mov	a,sp
      000A21 24 FC            [12] 3129 	add	a,#0xfc
      000A23 F8               [12] 3130 	mov	r0,a
      000A24 C3               [12] 3131 	clr	c
      000A25 EE               [12] 3132 	mov	a,r6
      000A26 96               [12] 3133 	subb	a,@r0
      000A27 EF               [12] 3134 	mov	a,r7
      000A28 64 80            [12] 3135 	xrl	a,#0x80
      000A2A 08               [12] 3136 	inc	r0
      000A2B 86 F0            [24] 3137 	mov	b,@r0
      000A2D 63 F0 80         [24] 3138 	xrl	b,#0x80
      000A30 95 F0            [12] 3139 	subb	a,b
      000A32 50 05            [24] 3140 	jnc	00119$
      000A34                       3141 00118$:
                                   3142 ;	../../cpu/cc253x/dev/cc2530-rf.c:749: return RADIO_RESULT_INVALID_VALUE;
      000A34 75 82 02         [24] 3143 	mov	dpl,#0x02
      000A37 80 33            [24] 3144 	sjmp	00124$
      000A39                       3145 00119$:
                                   3146 ;	../../cpu/cc253x/dev/cc2530-rf.c:752: set_tx_power(value);
      000A39 E5 81            [12] 3147 	mov	a,sp
      000A3B 24 FC            [12] 3148 	add	a,#0xfc
      000A3D F8               [12] 3149 	mov	r0,a
      000A3E 86 82            [24] 3150 	mov	dpl,@r0
      000A40 08               [12] 3151 	inc	r0
      000A41 86 83            [24] 3152 	mov	dph,@r0
      000A43 78rC2            [12] 3153 	mov	r0,#_set_tx_power
      000A45 79s01            [12] 3154 	mov	r1,#(_set_tx_power >> 8)
      000A47 7As00            [12] 3155 	mov	r2,#(_set_tx_power >> 16)
      000A49 12r00r00         [24] 3156 	lcall	__sdcc_banked_call
                                   3157 ;	../../cpu/cc253x/dev/cc2530-rf.c:753: return RADIO_RESULT_OK;
      000A4C 75 82 00         [24] 3158 	mov	dpl,#0x00
                                   3159 ;	../../cpu/cc253x/dev/cc2530-rf.c:754: case RADIO_PARAM_CCA_THRESHOLD:
      000A4F 80 1B            [24] 3160 	sjmp	00124$
      000A51                       3161 00121$:
                                   3162 ;	../../cpu/cc253x/dev/cc2530-rf.c:755: set_cca_threshold(value);
      000A51 E5 81            [12] 3163 	mov	a,sp
      000A53 24 FC            [12] 3164 	add	a,#0xfc
      000A55 F8               [12] 3165 	mov	r0,a
      000A56 86 82            [24] 3166 	mov	dpl,@r0
      000A58 08               [12] 3167 	inc	r0
      000A59 86 83            [24] 3168 	mov	dph,@r0
      000A5B 78r26            [12] 3169 	mov	r0,#_set_cca_threshold
      000A5D 79s01            [12] 3170 	mov	r1,#(_set_cca_threshold >> 8)
      000A5F 7As00            [12] 3171 	mov	r2,#(_set_cca_threshold >> 16)
      000A61 12r00r00         [24] 3172 	lcall	__sdcc_banked_call
                                   3173 ;	../../cpu/cc253x/dev/cc2530-rf.c:756: return RADIO_RESULT_OK;
      000A64 75 82 00         [24] 3174 	mov	dpl,#0x00
                                   3175 ;	../../cpu/cc253x/dev/cc2530-rf.c:757: default:
      000A67 80 03            [24] 3176 	sjmp	00124$
      000A69                       3177 00122$:
                                   3178 ;	../../cpu/cc253x/dev/cc2530-rf.c:758: return RADIO_RESULT_NOT_SUPPORTED;
      000A69 75 82 01         [24] 3179 	mov	dpl,#0x01
                                   3180 ;	../../cpu/cc253x/dev/cc2530-rf.c:759: }
      000A6C                       3181 00124$:
      000A6C 02r00r00         [24] 3182 	ljmp	__sdcc_banked_ret
                                   3183 ;------------------------------------------------------------
                                   3184 ;Allocation info for local variables in function 'get_object'
                                   3185 ;------------------------------------------------------------
                                   3186 ;dest                      Allocated to stack - sp -10
                                   3187 ;size                      Allocated to stack - sp -12
                                   3188 ;param                     Allocated to registers r6 r7 
                                   3189 ;target                    Allocated to stack - sp -4
                                   3190 ;i                         Allocated to stack - sp -1
                                   3191 ;------------------------------------------------------------
                                   3192 ;	../../cpu/cc253x/dev/cc2530-rf.c:763: get_object(radio_param_t param, void *dest, size_t size)
                                   3193 ;	-----------------------------------------
                                   3194 ;	 function get_object
                                   3195 ;	-----------------------------------------
      000A6F                       3196 _get_object:
      000A6F E5 81            [12] 3197 	mov	a,sp
      000A71 24 05            [12] 3198 	add	a,#0x05
      000A73 F5 81            [12] 3199 	mov	sp,a
      000A75 AE 82            [24] 3200 	mov	r6,dpl
      000A77 AF 83            [24] 3201 	mov	r7,dph
                                   3202 ;	../../cpu/cc253x/dev/cc2530-rf.c:768: if(param == RADIO_PARAM_64BIT_ADDR) {
      000A79 BE 09 05         [24] 3203 	cjne	r6,#0x09,00124$
      000A7C BF 00 02         [24] 3204 	cjne	r7,#0x00,00124$
      000A7F 80 03            [24] 3205 	sjmp	00125$
      000A81                       3206 00124$:
      000A81 02r0Br0B         [24] 3207 	ljmp	00106$
      000A84                       3208 00125$:
                                   3209 ;	../../cpu/cc253x/dev/cc2530-rf.c:769: if(size != 8 || !dest) {
      000A84 E5 81            [12] 3210 	mov	a,sp
      000A86 24 F4            [12] 3211 	add	a,#0xf4
      000A88 F8               [12] 3212 	mov	r0,a
      000A89 B6 08 0E         [24] 3213 	cjne	@r0,#0x08,00101$
      000A8C 08               [12] 3214 	inc	r0
      000A8D B6 00 0A         [24] 3215 	cjne	@r0,#0x00,00101$
      000A90 E5 81            [12] 3216 	mov	a,sp
      000A92 24 F6            [12] 3217 	add	a,#0xf6
      000A94 F8               [12] 3218 	mov	r0,a
      000A95 E6               [12] 3219 	mov	a,@r0
      000A96 08               [12] 3220 	inc	r0
      000A97 46               [12] 3221 	orl	a,@r0
      000A98 70 05            [24] 3222 	jnz	00102$
      000A9A                       3223 00101$:
                                   3224 ;	../../cpu/cc253x/dev/cc2530-rf.c:770: return RADIO_RESULT_INVALID_VALUE;
      000A9A 75 82 02         [24] 3225 	mov	dpl,#0x02
      000A9D 80 6F            [24] 3226 	sjmp	00109$
      000A9F                       3227 00102$:
                                   3228 ;	../../cpu/cc253x/dev/cc2530-rf.c:773: target = dest;
      000A9F E5 81            [12] 3229 	mov	a,sp
      000AA1 24 F6            [12] 3230 	add	a,#0xf6
      000AA3 F8               [12] 3231 	mov	r0,a
      000AA4 E5 81            [12] 3232 	mov	a,sp
      000AA6 24 FC            [12] 3233 	add	a,#0xfc
      000AA8 F9               [12] 3234 	mov	r1,a
      000AA9 E6               [12] 3235 	mov	a,@r0
      000AAA F7               [12] 3236 	mov	@r1,a
      000AAB 08               [12] 3237 	inc	r0
      000AAC 09               [12] 3238 	inc	r1
      000AAD E6               [12] 3239 	mov	a,@r0
      000AAE F7               [12] 3240 	mov	@r1,a
      000AAF 08               [12] 3241 	inc	r0
      000AB0 09               [12] 3242 	inc	r1
      000AB1 E6               [12] 3243 	mov	a,@r0
      000AB2 F7               [12] 3244 	mov	@r1,a
                                   3245 ;	../../cpu/cc253x/dev/cc2530-rf.c:774: for(i = 0; i < 8; i++) {
      000AB3 A8 81            [24] 3246 	mov	r0,sp
      000AB5 18               [12] 3247 	dec	r0
      000AB6 E4               [12] 3248 	clr	a
      000AB7 F6               [12] 3249 	mov	@r0,a
      000AB8 08               [12] 3250 	inc	r0
      000AB9 F6               [12] 3251 	mov	@r0,a
      000ABA                       3252 00107$:
                                   3253 ;	../../cpu/cc253x/dev/cc2530-rf.c:775: target[i] = ((uint8_t *)&EXT_ADDR0)[7 - i] & 0xFF;
      000ABA E5 81            [12] 3254 	mov	a,sp
      000ABC 24 FC            [12] 3255 	add	a,#0xfc
      000ABE F8               [12] 3256 	mov	r0,a
      000ABF A9 81            [24] 3257 	mov	r1,sp
      000AC1 19               [12] 3258 	dec	r1
      000AC2 E7               [12] 3259 	mov	a,@r1
      000AC3 26               [12] 3260 	add	a,@r0
      000AC4 FA               [12] 3261 	mov	r2,a
      000AC5 09               [12] 3262 	inc	r1
      000AC6 E7               [12] 3263 	mov	a,@r1
      000AC7 08               [12] 3264 	inc	r0
      000AC8 36               [12] 3265 	addc	a,@r0
      000AC9 FE               [12] 3266 	mov	r6,a
      000ACA 08               [12] 3267 	inc	r0
      000ACB 86 07            [24] 3268 	mov	ar7,@r0
      000ACD A8 81            [24] 3269 	mov	r0,sp
      000ACF 18               [12] 3270 	dec	r0
      000AD0 74 07            [12] 3271 	mov	a,#0x07
      000AD2 C3               [12] 3272 	clr	c
      000AD3 96               [12] 3273 	subb	a,@r0
      000AD4 FC               [12] 3274 	mov	r4,a
      000AD5 E4               [12] 3275 	clr	a
      000AD6 08               [12] 3276 	inc	r0
      000AD7 96               [12] 3277 	subb	a,@r0
      000AD8 FD               [12] 3278 	mov	r5,a
      000AD9 EC               [12] 3279 	mov	a,r4
      000ADA 24 6A            [12] 3280 	add	a,#_EXT_ADDR0
      000ADC F5 82            [12] 3281 	mov	dpl,a
      000ADE ED               [12] 3282 	mov	a,r5
      000ADF 34 61            [12] 3283 	addc	a,#(_EXT_ADDR0 >> 8)
      000AE1 F5 83            [12] 3284 	mov	dph,a
      000AE3 E0               [24] 3285 	movx	a,@dptr
      000AE4 FD               [12] 3286 	mov	r5,a
      000AE5 8A 82            [24] 3287 	mov	dpl,r2
      000AE7 8E 83            [24] 3288 	mov	dph,r6
      000AE9 8F F0            [24] 3289 	mov	b,r7
      000AEB 12r00r00         [24] 3290 	lcall	__gptrput
                                   3291 ;	../../cpu/cc253x/dev/cc2530-rf.c:774: for(i = 0; i < 8; i++) {
      000AEE A8 81            [24] 3292 	mov	r0,sp
      000AF0 18               [12] 3293 	dec	r0
      000AF1 06               [12] 3294 	inc	@r0
      000AF2 B6 00 02         [24] 3295 	cjne	@r0,#0x00,00129$
      000AF5 08               [12] 3296 	inc	r0
      000AF6 06               [12] 3297 	inc	@r0
      000AF7                       3298 00129$:
      000AF7 A8 81            [24] 3299 	mov	r0,sp
      000AF9 18               [12] 3300 	dec	r0
      000AFA C3               [12] 3301 	clr	c
      000AFB E6               [12] 3302 	mov	a,@r0
      000AFC 94 08            [12] 3303 	subb	a,#0x08
      000AFE 08               [12] 3304 	inc	r0
      000AFF E6               [12] 3305 	mov	a,@r0
      000B00 64 80            [12] 3306 	xrl	a,#0x80
      000B02 94 80            [12] 3307 	subb	a,#0x80
      000B04 40 B4            [24] 3308 	jc	00107$
                                   3309 ;	../../cpu/cc253x/dev/cc2530-rf.c:778: return RADIO_RESULT_OK;
      000B06 75 82 00         [24] 3310 	mov	dpl,#0x00
      000B09 80 03            [24] 3311 	sjmp	00109$
      000B0B                       3312 00106$:
                                   3313 ;	../../cpu/cc253x/dev/cc2530-rf.c:780: return RADIO_RESULT_NOT_SUPPORTED;
      000B0B 75 82 01         [24] 3314 	mov	dpl,#0x01
      000B0E                       3315 00109$:
      000B0E E5 81            [12] 3316 	mov	a,sp
      000B10 24 FB            [12] 3317 	add	a,#0xFB
      000B12 F5 81            [12] 3318 	mov	sp,a
      000B14 02r00r00         [24] 3319 	ljmp	__sdcc_banked_ret
                                   3320 ;------------------------------------------------------------
                                   3321 ;Allocation info for local variables in function 'set_object'
                                   3322 ;------------------------------------------------------------
                                   3323 ;src                       Allocated to stack - sp -9
                                   3324 ;size                      Allocated to stack - sp -11
                                   3325 ;param                     Allocated to registers r6 r7 
                                   3326 ;i                         Allocated to stack - sp -1
                                   3327 ;sloc0                     Allocated to stack - sp -3
                                   3328 ;------------------------------------------------------------
                                   3329 ;	../../cpu/cc253x/dev/cc2530-rf.c:784: set_object(radio_param_t param, const void *src, size_t size)
                                   3330 ;	-----------------------------------------
                                   3331 ;	 function set_object
                                   3332 ;	-----------------------------------------
      000B17                       3333 _set_object:
      000B17 E5 81            [12] 3334 	mov	a,sp
      000B19 24 04            [12] 3335 	add	a,#0x04
      000B1B F5 81            [12] 3336 	mov	sp,a
      000B1D AE 82            [24] 3337 	mov	r6,dpl
      000B1F AF 83            [24] 3338 	mov	r7,dph
                                   3339 ;	../../cpu/cc253x/dev/cc2530-rf.c:788: if(param == RADIO_PARAM_64BIT_ADDR) {
      000B21 BE 09 05         [24] 3340 	cjne	r6,#0x09,00124$
      000B24 BF 00 02         [24] 3341 	cjne	r7,#0x00,00124$
      000B27 80 03            [24] 3342 	sjmp	00125$
      000B29                       3343 00124$:
      000B29 02r0BrB2         [24] 3344 	ljmp	00106$
      000B2C                       3345 00125$:
                                   3346 ;	../../cpu/cc253x/dev/cc2530-rf.c:789: if(size != 8 || !src) {
      000B2C E5 81            [12] 3347 	mov	a,sp
      000B2E 24 F5            [12] 3348 	add	a,#0xf5
      000B30 F8               [12] 3349 	mov	r0,a
      000B31 B6 08 0E         [24] 3350 	cjne	@r0,#0x08,00101$
      000B34 08               [12] 3351 	inc	r0
      000B35 B6 00 0A         [24] 3352 	cjne	@r0,#0x00,00101$
      000B38 E5 81            [12] 3353 	mov	a,sp
      000B3A 24 F7            [12] 3354 	add	a,#0xf7
      000B3C F8               [12] 3355 	mov	r0,a
      000B3D E6               [12] 3356 	mov	a,@r0
      000B3E 08               [12] 3357 	inc	r0
      000B3F 46               [12] 3358 	orl	a,@r0
      000B40 70 05            [24] 3359 	jnz	00113$
      000B42                       3360 00101$:
                                   3361 ;	../../cpu/cc253x/dev/cc2530-rf.c:790: return RADIO_RESULT_INVALID_VALUE;
      000B42 75 82 02         [24] 3362 	mov	dpl,#0x02
                                   3363 ;	../../cpu/cc253x/dev/cc2530-rf.c:793: for(i = 0; i < 8; i++) {
      000B45 80 6E            [24] 3364 	sjmp	00109$
      000B47                       3365 00113$:
      000B47 A8 81            [24] 3366 	mov	r0,sp
      000B49 18               [12] 3367 	dec	r0
      000B4A E4               [12] 3368 	clr	a
      000B4B F6               [12] 3369 	mov	@r0,a
      000B4C 08               [12] 3370 	inc	r0
      000B4D F6               [12] 3371 	mov	@r0,a
      000B4E                       3372 00107$:
                                   3373 ;	../../cpu/cc253x/dev/cc2530-rf.c:794: ((uint8_t *)&EXT_ADDR0)[i] = ((uint8_t *)src)[7 - i];
      000B4E A8 81            [24] 3374 	mov	r0,sp
      000B50 18               [12] 3375 	dec	r0
      000B51 E5 81            [12] 3376 	mov	a,sp
      000B53 24 FD            [12] 3377 	add	a,#0xfd
      000B55 F9               [12] 3378 	mov	r1,a
      000B56 E6               [12] 3379 	mov	a,@r0
      000B57 24 6A            [12] 3380 	add	a,#_EXT_ADDR0
      000B59 F7               [12] 3381 	mov	@r1,a
      000B5A 08               [12] 3382 	inc	r0
      000B5B E6               [12] 3383 	mov	a,@r0
      000B5C 34 61            [12] 3384 	addc	a,#(_EXT_ADDR0 >> 8)
      000B5E 09               [12] 3385 	inc	r1
      000B5F F7               [12] 3386 	mov	@r1,a
      000B60 E5 81            [12] 3387 	mov	a,sp
      000B62 24 F7            [12] 3388 	add	a,#0xf7
      000B64 F8               [12] 3389 	mov	r0,a
      000B65 86 02            [24] 3390 	mov	ar2,@r0
      000B67 08               [12] 3391 	inc	r0
      000B68 86 03            [24] 3392 	mov	ar3,@r0
      000B6A 08               [12] 3393 	inc	r0
      000B6B 86 07            [24] 3394 	mov	ar7,@r0
      000B6D A8 81            [24] 3395 	mov	r0,sp
      000B6F 18               [12] 3396 	dec	r0
      000B70 74 07            [12] 3397 	mov	a,#0x07
      000B72 C3               [12] 3398 	clr	c
      000B73 96               [12] 3399 	subb	a,@r0
      000B74 FD               [12] 3400 	mov	r5,a
      000B75 E4               [12] 3401 	clr	a
      000B76 08               [12] 3402 	inc	r0
      000B77 96               [12] 3403 	subb	a,@r0
      000B78 FE               [12] 3404 	mov	r6,a
      000B79 ED               [12] 3405 	mov	a,r5
      000B7A 2A               [12] 3406 	add	a,r2
      000B7B FA               [12] 3407 	mov	r2,a
      000B7C EE               [12] 3408 	mov	a,r6
      000B7D 3B               [12] 3409 	addc	a,r3
      000B7E FB               [12] 3410 	mov	r3,a
      000B7F 8A 82            [24] 3411 	mov	dpl,r2
      000B81 8B 83            [24] 3412 	mov	dph,r3
      000B83 8F F0            [24] 3413 	mov	b,r7
      000B85 12r00r00         [24] 3414 	lcall	__gptrget
      000B88 FA               [12] 3415 	mov	r2,a
      000B89 E5 81            [12] 3416 	mov	a,sp
      000B8B 24 FD            [12] 3417 	add	a,#0xfd
      000B8D F8               [12] 3418 	mov	r0,a
      000B8E 86 82            [24] 3419 	mov	dpl,@r0
      000B90 08               [12] 3420 	inc	r0
      000B91 86 83            [24] 3421 	mov	dph,@r0
      000B93 EA               [12] 3422 	mov	a,r2
      000B94 F0               [24] 3423 	movx	@dptr,a
                                   3424 ;	../../cpu/cc253x/dev/cc2530-rf.c:793: for(i = 0; i < 8; i++) {
      000B95 A8 81            [24] 3425 	mov	r0,sp
      000B97 18               [12] 3426 	dec	r0
      000B98 06               [12] 3427 	inc	@r0
      000B99 B6 00 02         [24] 3428 	cjne	@r0,#0x00,00129$
      000B9C 08               [12] 3429 	inc	r0
      000B9D 06               [12] 3430 	inc	@r0
      000B9E                       3431 00129$:
      000B9E A8 81            [24] 3432 	mov	r0,sp
      000BA0 18               [12] 3433 	dec	r0
      000BA1 C3               [12] 3434 	clr	c
      000BA2 E6               [12] 3435 	mov	a,@r0
      000BA3 94 08            [12] 3436 	subb	a,#0x08
      000BA5 08               [12] 3437 	inc	r0
      000BA6 E6               [12] 3438 	mov	a,@r0
      000BA7 64 80            [12] 3439 	xrl	a,#0x80
      000BA9 94 80            [12] 3440 	subb	a,#0x80
      000BAB 40 A1            [24] 3441 	jc	00107$
                                   3442 ;	../../cpu/cc253x/dev/cc2530-rf.c:797: return RADIO_RESULT_OK;
      000BAD 75 82 00         [24] 3443 	mov	dpl,#0x00
      000BB0 80 03            [24] 3444 	sjmp	00109$
      000BB2                       3445 00106$:
                                   3446 ;	../../cpu/cc253x/dev/cc2530-rf.c:799: return RADIO_RESULT_NOT_SUPPORTED;
      000BB2 75 82 01         [24] 3447 	mov	dpl,#0x01
      000BB5                       3448 00109$:
      000BB5 E5 81            [12] 3449 	mov	a,sp
      000BB7 24 FC            [12] 3450 	add	a,#0xFC
      000BB9 F5 81            [12] 3451 	mov	sp,a
      000BBB 02r00r00         [24] 3452 	ljmp	__sdcc_banked_ret
                                   3453 	.area CSEG    (CODE)
                                   3454 	.area CONST   (CODE)
      000000                       3455 _output_power:
      000000 05 00                 3456 	.byte #0x05,#0x00	;  5
      000002 F5                    3457 	.db #0xF5	; 245
      000003 03 00                 3458 	.byte #0x03,#0x00	;  3
      000005 E5                    3459 	.db #0xE5	; 229
      000006 01 00                 3460 	.byte #0x01,#0x00	;  1
      000008 D5                    3461 	.db #0xD5	; 213
      000009 00 00                 3462 	.byte #0x00,#0x00	;  0
      00000B C5                    3463 	.db #0xC5	; 197
      00000C FF FF                 3464 	.byte #0xFF,#0xFF	; -1
      00000E B5                    3465 	.db #0xB5	; 181
      00000F FD FF                 3466 	.byte #0xFD,#0xFF	; -3
      000011 A5                    3467 	.db #0xA5	; 165
      000012 FC FF                 3468 	.byte #0xFC,#0xFF	; -4
      000014 95                    3469 	.db #0x95	; 149
      000015 FA FF                 3470 	.byte #0xFA,#0xFF	; -6
      000017 85                    3471 	.db #0x85	; 133
      000018 F8 FF                 3472 	.byte #0xF8,#0xFF	; -8
      00001A 75                    3473 	.db #0x75	; 117	'u'
      00001B F6 FF                 3474 	.byte #0xF6,#0xFF	; -10
      00001D 65                    3475 	.db #0x65	; 101	'e'
      00001E F4 FF                 3476 	.byte #0xF4,#0xFF	; -12
      000020 55                    3477 	.db #0x55	; 85	'U'
      000021 F2 FF                 3478 	.byte #0xF2,#0xFF	; -14
      000023 45                    3479 	.db #0x45	; 69	'E'
      000024 F0 FF                 3480 	.byte #0xF0,#0xFF	; -16
      000026 35                    3481 	.db #0x35	; 53	'5'
      000027 EE FF                 3482 	.byte #0xEE,#0xFF	; -18
      000029 25                    3483 	.db #0x25	; 37
      00002A EC FF                 3484 	.byte #0xEC,#0xFF	; -20
      00002C 15                    3485 	.db #0x15	; 21
      00002D EA FF                 3486 	.byte #0xEA,#0xFF	; -22
      00002F 05                    3487 	.db #0x05	; 5
      000030 E4 FF                 3488 	.byte #0xE4,#0xFF	; -28
      000032 05                    3489 	.db #0x05	; 5
      000033                       3490 _cc2530_rf_driver:
      000033r7Es02s00              3491 	.byte _init,(_init >> 8),(_init >> 16)
      000036rD4s02s00              3492 	.byte _prepare,(_prepare >> 8),(_prepare >> 16)
      000039r47s03s00              3493 	.byte _transmit,(_transmit >> 8),(_transmit >> 16)
      00003Cr16s04s00              3494 	.byte _send,(_send >> 8),(_send >> 16)
      00003Fr55s04s00              3495 	.byte _read,(_read >> 8),(_read >> 16)
      000042r4Fs05s00              3496 	.byte _channel_clear,(_channel_clear >> 8),(_channel_clear >> 16)
      000045r62s05s00              3497 	.byte _receiving_packet,(_receiving_packet >> 8),(_receiving_packet >> 16)
      000048r6Cs05s00              3498 	.byte _pending_packet,(_pending_packet >> 8),(_pending_packet >> 16)
      00004Br7Ds05s00              3499 	.byte _on,(_on >> 8),(_on >> 16)
      00004Er94s05s00              3500 	.byte _off,(_off >> 8),(_off >> 16)
      000051rAAs05s00              3501 	.byte _get_value,(_get_value >> 8),(_get_value >> 16)
      000054rA4s08s00              3502 	.byte _set_value,(_set_value >> 8),(_set_value >> 16)
      000057r6Fs0As00              3503 	.byte _get_object,(_get_object >> 8),(_get_object >> 16)
      00005Ar17s0Bs00              3504 	.byte _set_object,(_set_object >> 8),(_set_object >> 16)
                                   3505 	.area XINIT   (CODE)
                                   3506 	.area CABS    (ABS,CODE)
